{
  "openapi": "3.0.1",
  "info": {
    "title": "EKKO-API",
    "version": "3.16.0-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://crm.ekwaqua.fr",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/v1/voltalis/enable": {
      "put": {
        "tags": [
          "voltalis-controller"
        ],
        "operationId": "enable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableVoltalisDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/voltalis/enable/by-file": {
      "put": {
        "tags": [
          "voltalis-controller"
        ],
        "operationId": "enable_1",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/voltalis/disable": {
      "put": {
        "tags": [
          "voltalis-controller"
        ],
        "operationId": "disable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableVoltalisDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/voltalis/disable/by-file": {
      "put": {
        "tags": [
          "voltalis-controller"
        ],
        "operationId": "disable_1",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/service/{serviceId}": {
      "put": {
        "tags": [
          "service-controller"
        ],
        "operationId": "updateStartDateAndEndDate",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatesRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/periodeTarifaire/param": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updatePeriodeTarifaire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePeriodeTarifaireDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/periodeTarifaire/date": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateDatePeriodeTarifaire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatePeriodeTarifaireDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/offre/param": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateOffreService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOffreDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/offre/date": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateDateOffreService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDateOffreDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/new-contract": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateNewContratWithOldOffre",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContratRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/contrat/{contractReference}/date-prochaine-facture": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateDateProchaineFacture",
        "parameters": [
          {
            "name": "contractReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContratDateProchaineFactureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/contrat-fourniture": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateContratFourniture",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContratFournitureDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUpdateContratFournitureDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/update/contrat-fourniture/active": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateContratFournitureActive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContratFournitureDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUpdateContratFournitureDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sponsorship/loyalty-point": {
      "put": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "updateLoyaltyPoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsorshipLoyaltyPointRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorshipLoyaltyPointResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/resiliation": {
      "put": {
        "tags": [
          "resiliation-controller"
        ],
        "operationId": "resiliation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pod/terminate": {
      "put": {
        "tags": [
          "resiliation-controller"
        ],
        "operationId": "podTerminate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodTerminateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/payment-method/{contractId}": {
      "put": {
        "tags": [
          "payment-method"
        ],
        "summary": "Modifier le mode de paiement d'un contrat",
        "operationId": "updatePaymentMethod",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nDONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nIBAN_BIC_BAD_REQUEST L'IBAN ou le BIC sont incorrects.\t\nADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "BAD_DATA_ARGUMENT_ERROR Erreur dans le format des paramètres d'entrée.\t\nEXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.\t\nCREATE_MANDAT_EXTERNAL_CALL_ERROR Le mode de paiement a bien été mis à jour mais le pdf du mandat n’a pas pu être regénéré, veuillez contacter le service technique.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/update/date-debut-souhaitee": {
      "put": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "updateDateDebutSouhaitee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDateDebutSouhaiteeRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/pod/move-ctr": {
      "put": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Rattacher un POD multisites à un autre regroupement de factures que celui auquel il a été rattaché précédemment",
        "operationId": "updatePodMoveCtr",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MovePodContractRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/contrat/{refContrat}": {
      "put": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "updateContract",
        "parameters": [
          {
            "name": "refContrat",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/contrat-fourniture/status": {
      "put": {
        "tags": [
          "status-controller"
        ],
        "summary": "Changer le statut pour le client MS",
        "operationId": "updateStatusMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "STATUS_NOT_FOUND Le statut n'éxiste pas\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nSTATUS_AUTORISE_NOT_FOUND La liste des codes statut autorisés est vide pour le statut actuel."
          },
          "409": {
            "description": "TYPE_CUSTOMER_CONFLICT Le type client n'est pas compatible.\nCODE_STATUS_UPDATE_CONFLICT Changement de statut non autorisé pour le code statut suivant."
          }
        }
      },
      "post": {
        "tags": [
          "status-controller"
        ],
        "summary": "Changer le code statut du pod pour le client MS",
        "operationId": "getAvailableStatusMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableStatusRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nSTATUS_AUTORISE_NOT_FOUND La liste des codes statut autorisés est vide pour le statut actuel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableStatusResponseMsDTO"
                }
              }
            }
          },
          "409": {
            "description": "TYPE_CUSTOMER_CONFLICT Le type client n'est pas compatible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableStatusResponseMsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/levyDay": {
      "put": {
        "tags": [
          "levy-controller"
        ],
        "operationId": "updateLevyDay",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLevyDayRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/{refCustomer}/housing-profile/{refHousing}": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Récuperer les infos d'un lieu de conso",
        "operationId": "getCustomerHousingProfile",
        "parameters": [
          {
            "name": "refCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refHousing",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerHousingProfileResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "updateCustomerHousingProfile",
        "parameters": [
          {
            "name": "refCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refHousing",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerHousingProfileRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomerHousingProfileResponseDto"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Patch de mise à jour des infos d'un lieu de conso",
        "operationId": "updateCustomerHousingProfile_1",
        "parameters": [
          {
            "name": "refCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refHousing",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchUpdateCustomerHousingProfileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchUpdateCustomerHousingProfileDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{refCustomer}/company": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "updateCustomerCompany",
        "parameters": [
          {
            "name": "refCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerCompanyRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/{customerRef}/contact": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "updateCustomerContact",
        "parameters": [
          {
            "name": "customerRef",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateContactUtilisateurRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUpdateContactUtilisateurResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerRef}/contact/email/sending-confirmation": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "updateCustomerContactEmailSendConfirm",
        "parameters": [
          {
            "name": "customerRef",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateContactEmailSendConfirmRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/{customerReference}/address/{refAdresse}": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Met à jour une adresse",
        "operationId": "updateCustomerAddress",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refAdresse",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerAddressRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "INSEE_CODE_REQUIRED Le code insee doit être renseigné.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "ADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.\t\nCONTACT_ENUM_NOT_FOUND Le code contact d'énumération n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/customer-data": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "getCustomerData",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDataResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Mettre à jour les données du clients",
        "operationId": "updateCustomerData",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerDataRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "PROFIL_CLIENT_NOT_FOUND Le profil du client n'a pas été trouvé.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nTEAM_NOT_FOUND Le numéro d'équipe n'existe pas."
          },
          "400": {
            "description": "BIRTHDAY_BAD_REQUEST La date d'anniversaire est obligatoire."
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/customer-attributes": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "updateCustomerAttributes",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttributesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/consent/revoke": {
      "put": {
        "tags": [
          "consent-controller"
        ],
        "summary": "Supprimer un consentement",
        "operationId": "revokeCustomerConsent",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeCustomerConsentRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko."
          }
        }
      }
    },
    "/api/v1/customer/email": {
      "put": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateContactEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateEmailRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/contact/email": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Mettre à jour l'email d'un contact",
        "operationId": "updateCustomerContactEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateContactEmailRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible."
          }
        }
      }
    },
    "/api/v1/customer/contact/email/{UUID}/confirm": {
      "put": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Met à jour le contact avec l'email de confirmation",
        "operationId": "contactEmailCheckConfirmation",
        "parameters": [
          {
            "name": "UUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CUSTOMER_EMAIL_CONFIRMATION_NOT_FOUND Aucune confirmation trouvée pour l'uuid {uuid}.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmContactEmailResponseDto"
                }
              }
            }
          },
          "410": {
            "description": "CUSTOMER_EMAIL_CONFIRMATION_EXPIRED La confirmation avec l'uuid {uuid} a expiré.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmContactEmailResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contrat-fourniture/update-technical-informations": {
      "put": {
        "tags": [
          "contrat-fourniture-controller"
        ],
        "operationId": "updateTechnicalInformations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodTechnicalInformationsRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contrat-fourniture/status": {
      "put": {
        "tags": [
          "status-controller"
        ],
        "summary": "Mettre à jour le statut pour le contrat fourniture",
        "operationId": "update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible."
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contrat-fourniture/status/{statusCode}": {
      "put": {
        "tags": [
          "status-controller"
        ],
        "summary": "Mettre à jour le statut pour les contrats fourniture avec le statut code en entrée  EN_ATTENTE_DATE_SOUHAITEE ou EN_ATTENTE_DELAIS_RETRACTATION",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "STATUS_CONFLICT Statuts acceptés en entrée : 51 (en attente délai de rétractation) et 71 (en attente date souhaitée)"
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/renewals/tariffs-types": {
      "put": {
        "tags": [
          "renewal"
        ],
        "summary": "Mise a jour du type tarifaire des renouvellement de contrats",
        "operationId": "updateRenewalTariffType",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewalTariffTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible\t\nOFFRE_NOT_FOUND Aucune offre pour le contrat cible.\t\n"
          },
          "400": {
            "description": "BAD_DATA_ARGUMENT_ERROR Erreur dans le format des paramètres d'entrée. %s\n"
          },
          "409": {
            "description": "CONFLICT Aucun renouvellement en cours pour le contrat cible\t\nCONFLICT L’offre prévue au renouvellement n’autorise pas le changement de type de tarif pour le contrat cible\n"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/monthly-fees": {
      "put": {
        "tags": [
          "monthly-fee-controller"
        ],
        "summary": "Sauvegarder la/les nouvelle(s) mensualité(s).",
        "operationId": "saveMonthlyFees",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveMonthlyFeeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Tout s'est bien passé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          },
          "206": {
            "description": "La nouvelle mensualité {*énergie de la mensualité qui a bien été updatée} a bien été enregistrée.\t\nLa mensualité {energie de la mensualité qui n'a pas été updatée} n'a pas pu être enregistrée, veuillez contacter l'équipe technique.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "SAVE_MONTHLY_FEE_POD_STATUS_FORBIDDEN La modification des mensualités pour les POD rétractés / archivés / résiliés n'est pas autorisée.\t\nINVOICE_DATA_NOT_ANN_FORBIDDEN Fonctionnalité indisponible pour les rythmes de facturation saisonnalisée.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "TEMPLATE_NOT_FOUND Impossible de récupérer l'échéancier.\t\nCONTRAT_MONOSITE_NOT_FOUND Aucun contrat fourniture non multisite n'a été trouvé pour le client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "TEMPLATE_NOT_BELONG_TO_CONTRACT L'échéancier n'appartient pas au contrat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultEkkoResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{refContrat}/pod": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Retourne les infos des compteurs rattachés au contrat et les données de la 1ère offre sur laquelle ils ont été actifs",
        "operationId": "getPods",
        "parameters": [
          {
            "name": "refContrat",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "OFFRE_NOT_FOUND Aucune offre pour le contrat cible.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PodResponse"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "contract-controller"
        ],
        "operationId": "updateCodePod",
        "parameters": [
          {
            "name": "refContrat",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdateCodePodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contract/{refContrat}/contact": {
      "put": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Mettre à jour le contact",
        "operationId": "updateContractContact",
        "parameters": [
          {
            "name": "refContrat",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractUpdateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "TYPE_CONTACT_BAD_REQUEST Le type de contact renseigné n'est pas parmi ceux attendus.\t\nCONTACT_MOBILE_PHONE_MANDATORY Le numéro de téléphone mobile est obligatoire.\t\nCONTACT_INVALID_MOBILE_PHONE_FORMAT Le format du numéro de téléphone mobile est invalide.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/sage-sync": {
      "put": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Importe tier Sage à partir des informations d'un contrat.",
        "operationId": "syncSage",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nBANK_DETAILS_NOT_FOUND Les coordonnées bancaires n'existent pas."
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe."
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/invoices/sending-channel": {
      "put": {
        "tags": [
          "contract-controller"
        ],
        "operationId": "updateInvoiceSendingChannel",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInvoiceSendingChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInvoiceSendingChannelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/multisites/pod": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Créer un pod",
        "operationId": "createPod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePodRequestMsDTOV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "OFFRE_CDO_NOT_FOUND Aucune offre correspondante dans le CDO.\t\nOFFRE_CDO_NOT_FOUND_GAZ Pas de prix paramétré dans le CDO pour les POD GAZ\t\nOFFRE_CDO_NOT_FOUND_ELEC Pas de prix paramétré dans le CDO pour les POD ELEC."
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe."
          },
          "202": {
            "description": "Accepted"
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/multisites/pod/by-file": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Créer des pods à partir d'un fichier csv déposé sur S3.",
        "operationId": "createPodsByFile",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/multisites/groups": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Créer un groupe multisite et l'associer à son équipe.",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "GROUP_CONFLICT Le groupe existe déjà en base de données.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "A COMPLETER Vous avez indiqué une reconduction tacite. Veuillez renseigner à minima l'email du signataire pour être en mesure de l'informer des prix de renouvellement à l'issue du contrat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/update/periode-tarifaire/duree": {
      "post": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateDureePeriodeTarifaire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDureePeriodeTarifaireDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/update/all/periode-tarifaire/duree": {
      "post": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateDureeAllPeriodeTarifaire",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/supply-contract/renewal/{contractId}": {
      "post": {
        "tags": [
          "renewal"
        ],
        "operationId": "renewal",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewalRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/supply-contract/renewal/mailing/{contractId}": {
      "post": {
        "tags": [
          "renewal"
        ],
        "operationId": "mailingRenewal",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailingRenewalRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/supply-contract/renewal/mailing/energy/{energy}": {
      "post": {
        "tags": [
          "renewal"
        ],
        "summary": "send a renewal email for each contract to be renewed in 30 days.",
        "operationId": "mailingRenewal_1",
        "parameters": [
          {
            "name": "energy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "GAZ",
                "ELEC",
                "DUAL",
                "BOIS",
                "NO_ENERGY"
              ]
            }
          },
          {
            "name": "renewalDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/supply-contract/renewal/energy/{energy}": {
      "post": {
        "tags": [
          "renewal"
        ],
        "operationId": "renewal_1",
        "parameters": [
          {
            "name": "energy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "GAZ",
                "ELEC",
                "DUAL",
                "BOIS",
                "NO_ENERGY"
              ]
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/sponsorship": {
      "post": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "addSponsor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SponsorRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/service": {
      "post": {
        "tags": [
          "service-controller"
        ],
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServicesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/service/advantages": {
      "post": {
        "tags": [
          "advantage-controller"
        ],
        "summary": "Ajoute un avantage à un service",
        "operationId": "addAdvantagesToService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAdvantageDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "SERVICE_NOT_FOUND Le service n'existe pas pour la reference cible."
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/script/customer/team-number": {
      "post": {
        "tags": [
          "update-controller"
        ],
        "operationId": "updateTeamNumberForAllCustomer",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/resiliation/send-index-reminder": {
      "post": {
        "tags": [
          "resiliation-controller"
        ],
        "operationId": "sendIndexReminderSms",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/resiliation/demande": {
      "post": {
        "tags": [
          "resiliation-controller"
        ],
        "operationId": "findDemandeResiliationFinalisee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContratFournitureGenericRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandeResiliationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/quotations": {
      "post": {
        "tags": [
          "quotation-controller"
        ],
        "summary": "Création et estimation d'un devis.",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuotationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateQuotationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/pod/technical-information": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findTechnicalInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPodTechnicalInfoRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPodTechnicalInfoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/pod/search/for-ec": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllPodsForEc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPodRequestMsEcDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPodResponseMsEcDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/pod/check": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "checkMsPodByCodePod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPodRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/pending/by-filter": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "getSiteEnCoursIntegrationInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteEnCoursIntegrationInfoRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteEnCoursIntegrationInfoResponseMsDTOs"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/groups/{reference}/sites/import": {
      "post": {
        "tags": [
          "multi-sites-import-controller"
        ],
        "summary": "Import en masse des sites",
        "operationId": "createSitesImport",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSitesImportRequestMs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/v1/multisites/groups/{reference}/customers/import": {
      "post": {
        "tags": [
          "multi-sites-import-controller"
        ],
        "summary": "Import en masse de clients sur un groupe",
        "operationId": "createCustomerImport",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomersImportRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/v1/multisites/groups/{reference}/contracts/import": {
      "post": {
        "tags": [
          "multi-sites-import-controller"
        ],
        "summary": "Import en masse des regroupements",
        "operationId": "createContractsImport",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractsImportRequestMs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/api/v1/multisites/groups/{ref-groupe}/entities/{customer-id}/billConsolidations": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Create new multisite contract",
        "operationId": "createContractWithBillConsolidation",
        "parameters": [
          {
            "name": "ref-groupe",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMultisiteContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMultisiteContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/groupe": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllGroups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGroupeResponseMsDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Créer un groupe",
        "operationId": "createGroup_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupeRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "GROUP_CONFLICT Le groupe existe déjà en base de données.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupeResponseMsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/entities/search": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Search a page of multisite groups matching the given criteria",
        "operationId": "searchGroup",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCustomerSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageGroupCustomerSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/customer": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Créer un client multisite",
        "operationId": "createClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "GROUP_NOT_FOUND Le groupe n'a pas été retrouvé en base de données.\t\nSUPPLIER_NOT_FOUND Aucun fournisseur trouvé pour le nom %s.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientResponseMsDTO"
                }
              }
            }
          },
          "409": {
            "description": "GROUP_NAME_MULTIPLE_CONFLICT Le nom du groupe n'est pas assez précis.\t\nRAISON_SOCIALE_CONFLICT La raison sociale existe déjà.\t\nCUSTOMER_ALREADY_EXIST Le client avec la référence %s existe déjà.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientResponseMsDTO"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClientResponseMsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/customer/check/legitimacy/for-ec": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "checkLegitimacyForEc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckLegitimacyMsEcRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/contrat": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "createContract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContractResponseMsDTO"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/multisites/contrat/search": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllContractByClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetContractRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetContractResponseMsDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/contrat/search/for-ec": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllContractsForEc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetContractRequestMsEcDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContractResponseMsEcDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/contrat/by-file": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "createContracts",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/contract/check": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "checkSimilarContractExist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckContractExistRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckContractExistResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/client/search/for-ec": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllClientForEc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClientRequestMsEcDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClientResponseMsEcDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/client/search/by-group": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findAllClientByGroupe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClientByGroupeRequestMsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetClientByGroupeResponseMsDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/client/by-file": {
      "post": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "createClient_1",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/logs/customer-action": {
      "post": {
        "tags": [
          "log-controller"
        ],
        "operationId": "getCustomerActionLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCustomerActionLogRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerActionLogResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/levy/levyinoneday": {
      "post": {
        "tags": [
          "levy-controller"
        ],
        "operationId": "sendMailLevyInOneDay",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevyInOneDayDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/index/bascule": {
      "post": {
        "tags": [
          "index-controller"
        ],
        "operationId": "add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchIndexRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRAT_FOURNITURE_VALID_NOT_FOUND Aucun contrat fourniture valide n'a été trouvé pour le contrat cible.\t\nINDEX_NOT_FOUND Index non trouvé dans ce contexte.\t\nCONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchIndexResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwitchIndexResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/goActivation": {
      "post": {
        "tags": [
          "activation-controller"
        ],
        "summary": "Archiver ou valider la réception du 1er paiement d'un contrat",
        "operationId": "goActivation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoActivationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nENERGY_POD_NOT_HANDLE L'énergie du pod n'est pas gérée."
          },
          "400": {
            "description": "ARCHIVE_STATUS_BAD_REQUEST Le statut ne permet pas d'archiver."
          }
        }
      }
    },
    "/api/v1/goActivation/by-file": {
      "post": {
        "tags": [
          "activation-controller"
        ],
        "summary": "Archiver ou valider la réception du 1er paiement sur une liste de contrat (fichier à déposer sur S3)",
        "operationId": "goActivations",
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nENERGY_POD_NOT_HANDLE L'énergie du pod n'est pas gérée."
          },
          "400": {
            "description": "ARCHIVE_STATUS_BAD_REQUEST Le statut ne permet pas d'archiver."
          }
        }
      }
    },
    "/api/v1/fileo/callback/helpdesk": {
      "post": {
        "tags": [
          "help-desk-group-controller"
        ],
        "operationId": "updateGroupHelpDeskId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelpDeskGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customers/search": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Search a page of customers (particulars or B2C professionals) matching the given criteria",
        "operationId": "searchCustomersByParams",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSearchByParamsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageCustomerSearchByParamsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "findByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGetByMailResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{refCustomer}/housing-profile": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "createCustomerHousingProfile",
        "parameters": [
          {
            "name": "refCustomer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerHousingProfileRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerHousingProfileResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerReference}/news": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "findNews",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerNewsResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "createNews",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerNewsRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerNewsResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/loyalty-point": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Récuperer les jouls et les transactions associées à un client",
        "operationId": "findLoyaltyPoint",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EKW000000000"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerGetLoyaltyPointRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGetLoyaltyPointResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/consent": {
      "post": {
        "tags": [
          "consent-controller"
        ],
        "summary": "Met à jour un consentement",
        "operationId": "updateCustomerConsent",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerConsentRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible."
          },
          "409": {
            "description": "CONSENT_ALREADY_EXISTS Le consentement existe déjà."
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko."
          }
        }
      }
    },
    "/api/v1/customer/team-number": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Cherche le numéro d'équipe d'un client ou prospect en fonction du critère donné (Référence client / téléphone / email)",
        "operationId": "getTeamNumber",
        "parameters": [
          {
            "name": "customerInfo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nTEAM_NOT_FOUND Le numéro d'équipe n'existe pas.\t\nPROSPECT_NOT_FOUND Le numéro d'équipe du prospect n'est pas enregistré dans EKKO.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTeamNumberResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Retourne ou attribue un numéro d'équipe en fonction des contacts en entrée",
        "operationId": "assignTeamNumber",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTeamNumberRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "TEAM_NOT_FOUND Le numéro d'équipe n'existe pas.\t\nEQUIPE_ORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucune equipe origine prospect inconnu trouvée.\t\nLAST_CUSTOMER_CREATED_NOT_FOUND Impossible de remonter le dernier client créé.\t\nORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucun origine prospect inconnu trouvée.REF_TYPE_CANAL_NOT_FOUND L'origine du canal n'existe pas.\t\nREF_TYPE_CANAL_NOT_FOUND Le type canal n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignTeamNumberResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/send-to-activate": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "notifyEligibleCustomer",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/customer/pod": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "createCustomerPod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerPodRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerPodResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/detect": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Détecter si un pce/pdl appartient à un client ekko ou non",
        "operationId": "detectCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetectCustomerRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "INSEE_INFO_NOT_FOUND Impossible de récupérer le code Insee et/ou le grd.\t\nOFFRE_CDO_CODE_PRODUIT_NOT_FOUND Aucun produit correspondant dans le CDO.\t\nOFFRE_CDO_NOT_FOUND Aucune offre correspondante dans le CDO.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nCHANGE_OFFER_FOR_CUSTOMER_ID_NOT_FOUND Aucun changement d'offre trouvé pour le client.\t\nDONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible.\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nPERIODE_TARIFAIRE_NOT_FOUND La periode tarifaire n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectCustomerResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "INCOHERENCE_POD_CONTACT Le POD et contacts indiqués ne sont pas associés dans le CRM. Données à vérifier pour valider le CHF.\t\nINCOHERENCE_PDL_PCE Les POD indiqués en entrée ne semblent pas appartenir au même logement.\t\nOFFRE_CDO_MULTIPLE_CONFLICT Plusieurs offres correspondantes trouvées dans le CDO.\t\nOFFRE_CDO_MULTIPLE_CODE_PRODUIT_CONFLICT Plusieurs codes produits correspondants trouvés dans le CDO.\t\nENERGY_NOT_ELIGIBLE Le pod {energie} {codePod} n'est pas éligible car sur une zone non desservie.\t\nCONTRAT_FOURNITURE_MULTIPLE_CONFLICT Le contrat fourniture n'a pu être identifié de manière unique.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectCustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "POD_ENERGY_BAD_REQUEST Le PDL/PCE n'appartient pas à la bonne énergie.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectCustomerResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectCustomerResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/address": {
      "post": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "createCustomerAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerAddressRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCustomerAddressResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/update-mandate": {
      "post": {
        "tags": [
          "payment-method"
        ],
        "summary": "Mise à jour du mandat d'un contrat.\nGénère un nouveau RUM et renvoie l'URL du document dans le header 'location' de la réponse 201 (Created)\n",
        "operationId": "updateMandate",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "CTR000000001"
            },
            "example": "CTR000000001"
          },
          {
            "name": "updateDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2023-01-25"
            },
            "example": "2023-01-25"
          }
        ],
        "responses": {
          "201": {
            "description": "mandat créé et document généré avec son URL dans le header 'location'"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/tariff-periods": {
      "get": {
        "tags": [
          "tariff-periods"
        ],
        "summary": "Récupère les périodes de tarifs pour l'offre courante (en cours et celle du mois prochain pour le variable) et éventuellement pour celle renouvelée",
        "operationId": "getOffersPricesPeriods",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffersPricesPeriodsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Passe l’électricité et/ou le gaz d’un contrat en prix fixe.",
        "operationId": "changePriceTypeFromVariableToFixe",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePriceTypeFromVariableToFixeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "TARIFF_PERIOD_CHANGE_TYPE_UNAUTHORIZED La type de tarification ne peut pas être changé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePriceTypeFromVariableToFixeResponse"
                }
              }
            }
          },
          "404": {
            "description": "TARIFF_PERIOD_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nDONNEES_FACTURATION_NOT_FOUND Les doonnées de facturation n'éxistent pas pour la référence cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePriceTypeFromVariableToFixeResponse"
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko.\t\nEXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePriceTypeFromVariableToFixeResponse"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST Ce comportement n'a pas encore été implémenté.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePriceTypeFromVariableToFixeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/tariff-grid/generate": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Génère la grille tarifaire du contrat donné et en renvoie la référence ainsi que l'url",
        "operationId": "generateTariffGrid",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "GENERATE_TARIFF_CADRAN_NOT_VALIDE Fonctionnalité indisponible pour les 4 cadrans pour le moment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffGridResponse"
                }
              }
            }
          },
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nPOD_TECHNICAL_INFO_NOT_FOUND Impossible de récupérer les informations techniques (le POD est sans doute faux ou c'est une ELD).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffGridResponse"
                }
              }
            }
          },
          "409": {
            "description": "POD_TECHNICAL_INFO_INCONSISTENT Données techniques incohérentes dans flux.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffGridResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffGridResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/offers": {
      "post": {
        "tags": [
          "energy-offer-controller"
        ],
        "summary": "Récupérer le détail des offres disponibles de l'énergie à ajouter avec un warning sur le type d'estimation apportée, et le détail de l'offre de l'énergie courante.",
        "operationId": "getAvailableOffers",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "CTR00000001"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableOffersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nINSEE_INFO_NOT_FOUND Multiple code insee\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.\t\nTARIFF_PERIOD_NOT_FOUND La periode tarifaire n'existe pas pour la reference cible.\t\nPOD_DATA_NOT_FOUND Aucune donnée de pod de flux pour le contrat %s et le pod %s.\t\nCONFIGURATION_DATA_NOT_FOUND La configuration du compteur n'est pas renvoyée par FLUX.\t\nMETER_DATA_NOT_FOUND La configuration du compteur n'est pas renvoyée par FLUX.\t\nCONFIGURATION_DATA_NOT_FOUND_AT_DATE La configuration du compteur à cette date %s n'est pas renvoyée par FLUX.\t\nMETER_DATA_NOT_FOUND_AT_DATE Aucune donnée de compteur de flux pour ce POD.\t\nBILLING_ESTIMATES_NOT_FOUND Aucune grille de prix enregistrée pour l'offre et la configuration du compteur.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse"
                }
              }
            }
          },
          "409": {
            "description": "ENERGY_OFFER_CONFLICT L'énergie demandée pour le pod est déjà l'énergie courante du contrat\t\nMULTIPLE_INSEE Multiple code insee\t\nTARIFF_PERIOD_START_DATE_REQUIRED Plusieurs périodes tarifaires sont enregistrées à la même date pour ce POD, veuillez corriger les dates de début et de fin de ces périodes tarifaires.\t\nTARIFF_PERIOD_TOO_MANY_RESULTS Plusieurs périodes tarifaires sont enregistrées à la même date pour ce POD, veuillez corriger les dates de début et de fin de ces périodes tarifaires.\t\nUNEXPECTED_QUADRANTS_NUMBER L'option tarifaire de ce POD n'est pas gérée par EKKO.\t\nINVALID_CDO_PRODUCT_BILLING_TYPE Le type de facturation fourni par CDO est invalide : %s.\t\nCONFIGURATION_MULTIPLE_CONFLICT Plusieures configurations renvoyées par FLUX au %s, impossible de déterminer la configuration du compteur.\t\nMETER_MULTIPLE_CONFLICT Plusieurs compteurs renvoyés par FLUX au %s, impossible de déterminer la configuration du compteur.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse"
                }
              }
            }
          },
          "501": {
            "description": "NOT_IMPLEMENTED_YET L'ajout d'énergie sur des ELD n'est pas disponible pour le moment.\t\nNOT_IMPLEMENTED_YET L'ajout d'énergie si un renouvellement est en cours n'est pas disponible pour le moment.\t\nNOT_IMPLEMENTED_YET L'ajout d'énergie sur un client UFC n'est pas disponible pour le moment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse"
                }
              }
            }
          },
          "200": {
            "description": "Réponse retournée avec succès",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableOffersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/documents/send-print": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Imprimer tous les documents d'un contrat",
        "operationId": "sendPrintDocument",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPrintDocumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/documents/send-email": {
      "post": {
        "tags": [
          "document-controller"
        ],
        "summary": "Envoyer des documents à plusieurs emails",
        "operationId": "sendEmailDocument",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDocumentEmailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nS3_FILE_NOT_FOUND Erreur lors de la tentative de récupération du fichier sur S3.\t\nENERGY_POD_NOT_HANDLE L'énergie du pod n'est pas gérée."
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe."
          },
          "409": {
            "description": "CONTRACT_DOCUMENT_CONFLICT Aucune correspondance entre la reference contrat et la reference du document client"
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/pods/{pod-code}/request-termination": {
      "post": {
        "tags": [
          "pod-controller"
        ],
        "operationId": "termination",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pod-code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PodTerminationRequestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodTerminationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/monthly-variable-prices": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Génère une grille mensuelle des prix variables.",
        "operationId": "generateMonthlyVariablePrices",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Le service ne gère pas les contrats multisites.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyVariablePriceGridEvent"
                }
              }
            }
          },
          "404": {
            "description": "Le contrat n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyVariablePriceGridEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/rattrapage-sage": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Création d'un tiers sage pour tous les nouveaux clients (status_sage 0, 2, 3)",
        "operationId": "rattrapageSage",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/contracts/invoices/generate": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Génère la liste des factures de tous les contrats hors énergie.\nLe génération pour le reste des contrats n'est pas encore implémentée",
        "operationId": "generateInvoices",
        "parameters": [
          {
            "name": "outsideEnergyContract",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "invoicingMonth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2022-11"
          }
        ],
        "responses": {
          "201": {
            "description": "Les factures ont bien été générée avec pour localisation le chemin du header 'Location'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "- Le paramètre outsideEnergyContract doit être valorisé à true car la génération globale des factures n'est pas encore implémentée\n- Le format du mois de facturation est invalide",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Si un client rest comme cdo ou billing a un problème, une liste d'erreurs sera affichée",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/last-contacts": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Retrouver les sms, email, et tickets freshdesk d'un client",
        "operationId": "findLastContacts",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LastContactsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LastContactsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/invoice-frequency": {
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Changer de rythme de facturation d'un contrat",
        "operationId": "updateInvoiceFrequency",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceFrequencyRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "ENERGY_MONTHLY_FEE_MANDATORY La mensualité {GAZ/ELEC} est obligatoire.\t\nEXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe."
          },
          "404": {
            "description": "ACTIVE_CONTRACT_NOT_FOUND Aucun contrat actif n'existe pour la référence cible."
          },
          "409": {
            "description": "UPDATE_INVOICE_FREQUENCY_INVALID Il n’est pas possible de modifier le rythme de facturation si un des POD du contrat (hors bois) est en cours d’activation ou de résiliation.\t\nUPDATE_INVOICE_FREQUENCY_UNDER_30_DAYS Le dernier changement de rythme de facturation date de moins de 30 jours.\t\nUPDATE_BATCH_FACTURATION_CONFLICT Le batch de facturation n'a pu être déterminé en fonction du code de rythme de facturation."
          },
          "500": {
            "description": "BAD_DATA_ARGUMENT_ERROR Erreur dans le format des paramètres d'entrée.\t\nINTERNAL_SERVER_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko.\t\nEXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.\t\nCONTRACT_HAS_NO_CUSTOMER Aucun client n'existe pour la référence de contrat"
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/documents": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Remonte les documents sur les 5 dernières années d'un contrat, en fonction du nom du document donné en entrée",
        "operationId": "getDocumentsByName",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe Une erreur est survenue lors de l'appel à la GED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/global-infos": {
      "post": {
        "tags": [
          "contract-controller"
        ],
        "operationId": "getContractGlobalInfos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractGlobalInfosRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractGlobalInfosResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies/{siren}/statement": {
      "get": {
        "tags": [
          "company-controller"
        ],
        "summary": "Get company statements by siren",
        "operationId": "findStatements",
        "parameters": [
          {
            "name": "siren",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PRICE_SHIELD_2023_PRO",
                "PRICE_SHIELD_2023_COLLECTIVITY"
              ]
            }
          },
          {
            "name": "podCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryStatementResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "company-controller"
        ],
        "summary": "Save statement",
        "operationId": "create_3",
        "parameters": [
          {
            "name": "siren",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegulatoryStatementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/case-tracking": {
      "post": {
        "tags": [
          "case-tracking-controller"
        ],
        "summary": "Enregistrer un suivi d'affaire",
        "operationId": "saveCaseTracking",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseTrackingRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "CONTRAT_FOURNITURE_MULTIPLE_CONFLICT Le contrat fourniture n'a pu être identifié de manière unique."
          },
          "400": {
            "description": "CASE_TRACKING_UNMANAGED Le suivi d'affaire reçu n'est pas géré."
          },
          "404": {
            "description": "CONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nDONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible."
          }
        }
      }
    },
    "/api/v1/batches/variable-tariff-grids/calculate": {
      "post": {
        "tags": [
          "Batches"
        ],
        "summary": "Lance le traitement de génération mensuel des grilles tarifaires pour les prix variables.",
        "description": "Ce batch est asynchrone. Il va rechercher tous les contrats pour lesquels la grille tarifaire doit être regénérée et pour chaque contrat envoyer un message sur une file rabbitmq.",
        "operationId": "calculateMonthlyTariffGridForVariablePrices",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "La date de calcul des grilles tarifaires. Par default elle est égale au 1er jour du mois suivant la date du jour.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-12-01"
          }
        ],
        "responses": {
          "204": {
            "description": "Le batch s'est terminé correctement."
          },
          "400": {
            "description": "La date n'est pas au format yyyy-MM-dd"
          },
          "500": {
            "description": "Erreur serveur."
          }
        }
      }
    },
    "/api/v1/batches/regulatory-statement/{statementType}/import": {
      "post": {
        "tags": [
          "Batches"
        ],
        "summary": "Importer les attestations des fichiers csv boucliers tarifaires du s3 à la table regulatory_statemement",
        "operationId": "importRegulatoryStatement",
        "parameters": [
          {
            "name": "statementType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Importation des attestations de boucliers tarifaires"
          }
        }
      }
    },
    "/api/v1/batches/pods/status/waiting-guarantee-deposit": {
      "post": {
        "tags": [
          "batches"
        ],
        "summary": "Archive des pod en statut ATTENTE_DEPOT_DE_GARANTIE depuis plus de 15 jours.",
        "operationId": "checkPodWithStatusWaitingGuaranteeDeposit",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/batches/pods/status/pending-termination": {
      "post": {
        "tags": [
          "batches"
        ],
        "summary": "Activation des pod en statut EN_COURS_DE_RESILIATION ou RESILIATION_EN_ERREUR depuis plus d'un mois.",
        "operationId": "checkPodWithStatusPendingTermination",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/authenticate": {
      "post": {
        "tags": [
          "authentification"
        ],
        "summary": "Génère un token JWT pour la connexion espace client en caméléon.",
        "operationId": "generateExternalAuthenticationToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "INTERNAL_SERVER_ERROR Une erreur est survenue lors de la génération du token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtUrl"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/password-recovery/unlocking_token": {
      "post": {
        "tags": [
          "authentification"
        ],
        "summary": "Génère un code de déblocage à durée limitée pour modifier le mot de passe espace client",
        "operationId": "getTokenPasswordRecovery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRecoveryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Accès refusé, vous n'êtes pas authentifié·e ou vous n'avez pas le rôle requis pour accéder à cette ressource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "- Aucun contrat n'existe pour la référence donné.\n- Aucun client n'existe pour la référence client donné.\n- Aucun compte client n'existe pour ce mail.\n- Le client n'existe pas pour la reference du contrat donné\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe Une erreur est survenue lors de l'appel à Redis AWS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/password-recovery/unlocking_token/check": {
      "post": {
        "tags": [
          "authentification"
        ],
        "summary": "Compare le code de déblocage espace client de la requête au token Redis",
        "operationId": "validateTokenPasswordRecovery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Accès refusé, le code de déblocage n'est pas valide",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "- Aucun client n'existe pour la référence client donné.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "- Une erreur est survenue lors de l'appel à une api externe Une erreur est survenue lors de l'appel à Redis AWS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/archive": {
      "post": {
        "tags": [
          "archive-controller"
        ],
        "summary": "Archiver un POD",
        "operationId": "createArchive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArchiveRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "CONTRAT_FOURNITURE_VALID_NOT_FOUND Aucun contrat fourniture valide n'a été trouvé pour le contrat cible.\t\nCONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.\t\nENERGY_POD_NOT_HANDLE L'énergie du pod n'est pas gérée.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchiveResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "ARCHIVE_STATUS_BAD_REQUEST Le statut ne permet pas d'archiver.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchiveResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/advantage": {
      "post": {
        "tags": [
          "advantage-controller"
        ],
        "summary": "Ajoute un avantage à un client",
        "operationId": "createCustomerAdvantage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerAdvantageDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "ADVANTAGE_CODE_UNIQUE_CONFLICT Le code unique est obligatoire pour un avantage de type PREPAIMENT."
          },
          "404": {
            "description": "ADVANTAGE_CODE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCONTACT_NOT_FOUND L'avantage n'existe pas pour le code cible.\t\nCONTRAT_FOURNITURE_VALID_NOT_FOUND Aucun contrat fourniture valide n'a été trouvé pour le contrat cible.\t\nADVANTAGE_CODE_NOT_FOUND L'avantage n'existe pas pour le code cible.\t\nPOD_ENERGY_DUAL_NOT_FOUND Aucun pod ayant l'énérgie ELEC n'existe pour ce contrat pourtant DUAL."
          },
          "409": {
            "description": "ADVANTAGE_USED L'avantage a déjà été utilisé.\t\nOFFRE_VALIDE_CONFLICT Aucune offre valide (date de fin à null) n'existe pour le contrat cible."
          },
          "500": {
            "description": "DATABASE_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko."
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/v1/activation": {
      "post": {
        "tags": [
          "activation-controller"
        ],
        "summary": "Activer un POD dans ekko suite à la réception du FLUX d'activation",
        "operationId": "activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "SITE_EN_COURS_INTEGRATION_BAD_REQUEST Site en cours d'intégration...\t\nPOD_NOT_ASSOCIATE_IN_CONTRACT Le pod n'est pas rattaché au contrat."
          },
          "404": {
            "description": "POD_NOT_FOUND Aucun pod trouvé dans ce contexte.\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nCONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nDONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible.\t\nOFFRE_NOT_FOUND Aucune offre pour le contrat cible.\t\nPERIODE_TARIFAIRE_NOT_FOUND La periode tarifaire n'existe pas pour la reference cible."
          },
          "409": {
            "description": "POD_ACTIF_CONFLICT Un ou plusieurs POD déjà actifs avec ce code pod.\t\nCONTRAT_FOURNITURE_MULTIPLE_CONFLICT Le contrat fourniture n'a pu être identifié de manière unique.\t\n"
          }
        }
      }
    },
    "/api/v1/multisites/pod/{codePod}/housing-profile/name-invoice": {
      "patch": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "patchDenominationFacture",
        "parameters": [
          {
            "name": "codePod",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDenominationFactureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/pod/{codePod}/housing-profile/analytic-code": {
      "patch": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "patchCodeAnalytique",
        "parameters": [
          {
            "name": "codePod",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCodeAnalytiqueRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/favicon.ico": {
      "get": {
        "tags": [
          "favicon-controller"
        ],
        "operationId": "returnNoFavicon",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cti/data": {
      "get": {
        "tags": [
          "cti-controller"
        ],
        "summary": "Retourne le type du client (Numéro Masqué, Mauvais payeur, Client, Prospect) associé au téléphone donné en entrée",
        "operationId": "findTeamNumberByPhone",
        "parameters": [],
        "responses": {
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nTEAM_NOT_FOUND Le numéro d'équipe n'existe pas.\t\nEQUIPE_ORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucune equipe origine prospect inconnu trouvée.\t\nLAST_CUSTOMER_CREATED_NOT_FOUND Impossible de remonter le dernier client créé.\t\nORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucun origine prospect inconnu trouvée.\" +\nREF_TYPE_CANAL_NOT_FOUND L'origine du canal n'existe pas.\t\nREF_TYPE_CANAL_NOT_FOUND Le type canal n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamNumberByPhoneResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/cti/data/{phoneNumber}": {
      "get": {
        "tags": [
          "cti-controller"
        ],
        "summary": "Retourne le type du client (Numéro Masqué, Mauvais payeur, Client, Prospect) associé au téléphone donné en entrée",
        "operationId": "findTeamNumberByPhone_1",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.\t\nTEAM_NOT_FOUND Le numéro d'équipe n'existe pas.\t\nEQUIPE_ORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucune equipe origine prospect inconnu trouvée.\t\nLAST_CUSTOMER_CREATED_NOT_FOUND Impossible de remonter le dernier client créé.\t\nORIGINE_PROSPECT_INCONNU_NOT_FOUND Aucun origine prospect inconnu trouvée.\" +\nREF_TYPE_CANAL_NOT_FOUND L'origine du canal n'existe pas.\t\nREF_TYPE_CANAL_NOT_FOUND Le type canal n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamNumberByPhoneResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/multisites/groups/{reference}": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Renvoyer les informations du groupe par reference",
        "operationId": "getGroupByReference",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "GROUP_NOT_FOUND Le groupe n'a pas été retrouvé en base de données.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tariff-periods/{tariffPeriodId}/monthly-prices-periods": {
      "get": {
        "tags": [
          "tariff-periods"
        ],
        "summary": "Récupérer l'historique mensuel descendant des prix variables pour une période tarifaire.",
        "operationId": "getMonthlyPricesPeriods",
        "parameters": [
          {
            "name": "tariffPeriodId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "podCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "PERIODE_TARIFAIRE_NOT_FOUND La periode tarifaire n'existe pas pour la reference cible.\t\nPOD_NOT_FOUND Aucun pod trouvé dans ce contexte.\t\nADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.\t\nTARIFF_HISTORY_NOT_FOUND_FOR_MONTH Auncun historique de tarif trouvé pour le mois %s.\t\nCONFIGURATION_DATA_NOT_FOUND_AT_DATE La configuration du compteur à cette date %s n'est pas renvoyée par FLUX.\t\nMETER_DATA_NOT_FOUND_AT_DATE Aucune donnée de compteur de flux pour ce POD.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyPricesPeriodsResponse"
                }
              }
            }
          },
          "409": {
            "description": "CONFIGURATION_MULTIPLE_CONFLICT Plusieurs configurations trouvées dans expo point dans l'interval de date %s - %s.\t\nCONFIGURATION_MULTIPLE_CONFLICT Plusieures configurations renvoyées par FLUX au %s, impossible de déterminer la configuration du compteur.\t\nMETER_MULTIPLE_CONFLICT Plusieurs compteurs renvoyés par FLUX au %s, impossible de déterminer la configuration du compteur.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyPricesPeriodsResponse"
                }
              }
            }
          },
          "400": {
            "description": "TARIF_CODE_TO_BILLING_BAD_REQUEST Le code tarif n'est pas géré par billing.\nPUISSANCE_TO_BILLING_BAD_REQUEST La puissance n'est pas gérée par billing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyPricesPeriodsResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe %s",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthlyPricesPeriodsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sponsorship/{customerReference}/ranking": {
      "get": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "findLeaderboardByCustomerReference",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorshipLeaderboardResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sponsorship/refresh-view": {
      "get": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "refreshLeaderboardView",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/sponsored/{customerId}": {
      "get": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "findSponsored",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsoredResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sponsored/refresh-view": {
      "get": {
        "tags": [
          "sponsorship-controller"
        ],
        "operationId": "refreshSponsoredView",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/services/{contractId}": {
      "get": {
        "tags": [
          "service-controller"
        ],
        "operationId": "getThreeLastServices",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetServiceResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/resiliation/demandeur/{refClient}": {
      "get": {
        "tags": [
          "resiliation-controller"
        ],
        "operationId": "findResiliationUser",
        "parameters": [
          {
            "name": "refClient",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResiliationUserResponseDTO"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/reports/{type}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Récupere le rapport client dans le bucket correspondant au type demandé",
        "operationId": "getReport",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "renvoie le rapport client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "le type de rapport demandé n'est pas disponible parmi les choix possibles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Accès refusé, vous n'êtes pas authentifié·e ou vous n'avez pas le rôle requis pour accéder à cette ressource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payment-methods/{reference}/transactions": {
      "get": {
        "tags": [
          "payment-method"
        ],
        "summary": "Retourne les informations d'un mode de paiement et ses transactions",
        "operationId": "getPaymentMethodTransactionDetails",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "PAYMENT_METHOD_NOT_FOUND Aucun moyen de paiement trouvé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodTransactionDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payment-method/{contractId}/available": {
      "get": {
        "tags": [
          "payment-method"
        ],
        "operationId": "getAvailablePaymentMethod",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailablePaymentMethodResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/payment-method/refresh/by-file": {
      "get": {
        "tags": [
          "payment-method"
        ],
        "summary": "Traitement du fichier pour le portefeuille du client",
        "operationId": "refreshPaymentMethod",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/refresh/rechercheClientMSbyRefClient": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "rechercheClientMSbyRefClient",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/refresh/rechercheClientMSbyGroupe": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "rechercheClientMSbyGroupe",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/pod/search/for-ec/refresh-views": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "refreshMaterializedViewClientGroupe",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/pending/si-grd": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "getSiteEnCoursIntegrationSiGrd",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitesEnCoursIntegrationGrdsResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/offer/search/by-group": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "findOfferByGroup",
        "parameters": [
          {
            "name": "groupReference",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffreGroupeResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/imports/reports": {
      "get": {
        "tags": [
          "multi-sites-import-controller"
        ],
        "summary": "Rapport d'intégration des imports en masse MS",
        "operationId": "integrationReport",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationReportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/imports/reports/{reportReference}/errors": {
      "get": {
        "tags": [
          "multi-sites-import-controller"
        ],
        "summary": "Télécharge un fichier d'erreur d'un rapport sur S3 ",
        "operationId": "downloadReport",
        "parameters": [
          {
            "name": "reportReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/groups": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Renvoyer les informations des groupes",
        "operationId": "getGroupByName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "GROUP_NOT_FOUND Le groupe n'a pas été retrouvé en base de données.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponseDTO"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/groups/{reference}": {
      "get": {
        "tags": [
          "group-controller"
        ],
        "summary": "Renvoyer les informations du groupe par reference",
        "operationId": "getGroupByReference_1",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "GROUP_NOT_FOUND Le groupe n'a pas été retrouvé en base de données.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponseDTO"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/groups/{groupReference}/contracts": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Retourner tous les contrats appartenant à un groupe",
        "operationId": "findAllContractsByGroupReference",
        "parameters": [
          {
            "name": "groupReference",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractsByGroupResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/customers/{customerId}": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Get data of multisite customer by its customer reference.",
        "operationId": "getMultisitesCustomerByCustomerId",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultisitesCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/contrat/search/for-ec/refresh-views": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "operationId": "refreshMaterializedViewContratGroupe",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/multisites/contracts/search": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Search a page of multisite billing group matching the given criteria",
        "operationId": "searchContractsByParams",
        "parameters": [
          {
            "name": "contractRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractSearchByParamsRequest"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageContractSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/multisites/contract/infos": {
      "get": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Retourne les informations d'un regroupement de factures par référence contrat ou bon de commande",
        "operationId": "getContractInfos",
        "parameters": [
          {
            "name": "refContratOuBdc",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "BILLS_CONSOLIDATION_NOT_FOUND Aucun regroupement de facture trouvé.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInfosResponseMs"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/insee/{zipCode}": {
      "get": {
        "tags": [
          "insee-controller"
        ],
        "operationId": "getInsee",
        "parameters": [
          {
            "name": "zipCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InseeResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/echeancier/simulate-monthly-fee/reference-contrat/{contractId}": {
      "get": {
        "tags": [
          "template-controller"
        ],
        "summary": "Simuler les mensualités d'un contrat",
        "operationId": "simulateMonthlyFee",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "CUSTOMER_TYPE_TO_BILLING_BAD_REQUEST Le type de client n'est pas géré par billing.\t\nDATE_FIN_CONFIGURATION_BAD_REQUEST Aucune date de fin de validité n'est à null pour la configuration.\t\nDATE_FIN_COMPTEUR_BAD_REQUEST Aucune date de fin de validité n'est à null pour le compteur.\t\nPUISSANCE_TO_BILLING_BAD_REQUEST La puissance n'est pas gérée par billing.\t\nPROFIL_CONSOMMATION_BAD_REQUEST Le profil n'est pas géré par billing.\t\nCONTRAT_FOURNITURE_CAR_OT_BAD_REQUEST Le contrat fourniture n'a pu être mis à jour suite à une erreur d'option tarifaire et de car.\t\nTARIF_CODE_TO_BILLING_BAD_REQUEST Le code tarif n'est pas géré par billing.\t\nENERGY_BAD_REQUEST Le type d'énergie est inconnu.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateMonthlyFeeResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "CONTRACT_MULTISITE_FORBIDDEN Ce web service n'autorise pas de contrat multisite.\t\nSIMULATE_MONTHLY_FEE_POD_STATUS_NOT_ELIGIBLE Impossible d'estimer les mensualités pour un contrat n'ayant aucun POD actif.\t\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateMonthlyFeeResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "DONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible.\t\nCONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nCUSTOMER_NOT_FOUND Le client n'existe pas pour la reference cible.TARIFF_PERIOD_NOT_FOUND La periode tarifaire n'existe pas pour la reference cible.LIEU_DE_CONSOMMATION_NOT_FOUND Le lieu de consommation n'existe pas pour la reference cible.\t\nADRESSE_NOT_FOUND L'adresse n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateMonthlyFeeResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateMonthlyFeeResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customers": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "summary": "Search all customers of any type by a siren or siret starting with the given parameter value",
        "operationId": "searchCustomersBySiren",
        "parameters": [
          {
            "name": "siren",
            "in": "query",
            "description": "Début d'un siren",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 110002011
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerSearchBySirenResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}": {
      "get": {
        "tags": [
          "customer-controller"
        ],
        "operationId": "findByCustomerId",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGetByIdResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cti/redirect/{phoneNumber}": {
      "get": {
        "tags": [
          "cti-controller"
        ],
        "summary": "Redirige vers la fiche ou la page de recherche d'ekko ou d'akira, en fonction du type de client associé au numéro de téléphone donné en entrée",
        "operationId": "getRedirect",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "URL_REDIRECTION_NOT_FOUND L'url de redirection n'a pas été trouvée."
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/wallets": {
      "get": {
        "tags": [
          "wallet-controller"
        ],
        "summary": "Retourne le portefeuille du contrat",
        "operationId": "getContractWallet",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "PAYMENT_METHOD_TYPE_NOT_FOUND Le type de moyen de paiement est inconnu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/supply-contracts/statuses": {
      "get": {
        "tags": [
          "supply-contract-status-history-controller"
        ],
        "summary": "Récupérer l'historique des statuts des contrats fourniture de chaque énergie pour un contrat donné",
        "operationId": "getStatusesByEnergy",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusesByEnergyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/subscriptions/meters/{podCode}": {
      "get": {
        "tags": [
          "meter-controller"
        ],
        "operationId": "getSubscriptionMeterDeprecated",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionMeterResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/contracts/{contractId}/services": {
      "get": {
        "tags": [
          "service-controller"
        ],
        "summary": "Get options (KWH) gas / electricity or services (MENS), or products (ONESHOT) for the path given contract",
        "operationId": "getContractServicesByTypeAndEnergy",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tariffType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "KWH",
                "MENS",
                "ONESHOT"
              ]
            }
          },
          {
            "name": "energy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "GAS",
                "ELECTRICITY"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "BAD_DATA_ARGUMENT_ERROR with detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractServicesResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR (cdo / billing)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractServicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/products/current-and-renewal": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Récupere les informations d'un produit lié a un contrat ainsi que les informations de son renouvellement",
        "operationId": "getContractsExposedAndRenewal",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "GENERATE_TARIFF_CADRAN_NOT_VALIDE Fonctionnalité indisponible pour les 4 cadrans pour le moment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractsExposedAndRenewalResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractsExposedAndRenewalResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "IllegaleArgument le code de la grille contient un type qui ne correspond pas aux autres type de tarifs possibles\t\nEXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe Une erreur est survenue lors de l'appel à la CDO.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractsExposedAndRenewalResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pods/{podCode}": {
      "get": {
        "tags": [
          "pod-controller"
        ],
        "operationId": "getPodConfigurationDeprecated",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodConfigurationResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/contracts/{contractId}/pods/{podCode}/subscription-configurations": {
      "get": {
        "tags": [
          "meter-controller"
        ],
        "summary": "Retourne les informations du compteur de souscription du contrat pour un pod donnée",
        "operationId": "getSubscriptionMeter",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "OPTION_TARIFAIRE_INVALID L'option tarifaire n'est pas valide.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionMeterResponse"
                }
              }
            }
          },
          "404": {
            "description": "CONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nTARIFF_OPTION_NOT_FOUND L'option tarifaire n'existe pas.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionMeterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pods/{podCode}/dgo-configurations": {
      "get": {
        "tags": [
          "pod-controller"
        ],
        "summary": "Retourne les informations de configuration du pod",
        "operationId": "getPodConfiguration",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodConfigurationResponse"
                }
              }
            }
          },
          "409": {
            "description": "NEVER_ACTIVATED Le pod n'a pas encore été activé.\t\nPOD_TECHNICAL_INFO_INCONSISTENT Données techniques incohérentes dans flux.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodConfigurationResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pods/{podCode}/consents": {
      "get": {
        "tags": [
          "consent-controller"
        ],
        "summary": "Retourne les consentements d'un contrat",
        "operationId": "getPodConsents",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outsideEnergyContract",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConsentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "CONSENT_TYPE_BAD_REQUEST Le type de consentement n'est pas géré.\t\nBAD_DATA_ARGUMENT_ERROR Erreur dans le format des paramètres d'entrée. %s",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConsentsResponse"
                }
              }
            }
          },
          "404": {
            "description": "CONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nCONTACT_NOT_FOUND Le contact n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConsentsResponse"
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL_SERVER_ERROR Une erreur est survenue. Merci de contacter l'administrateur d'Ekko.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConsentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pods/{podCode}/available-statuses": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Récupérer la liste des statuts disponibles pour un site",
        "operationId": "getAvailableStatuses",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Available statuses are correctly returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableStatusesResponse"
                }
              }
            }
          },
          "404": {
            "description": "CONTRAT_FOURNITURE_NOT_FOUND No supply contract found for the provided contract and pod.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableStatusesResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe Une erreur est survenue lors de l'appel à la CDO.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableStatusesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/monthly-fees/currents": {
      "get": {
        "tags": [
          "monthly-fee-controller"
        ],
        "summary": "Retourne les informations de la/les mensualité(s) en cours.",
        "operationId": "getCurrentsMonthlyFees",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "SIMULATE_MONTHLY_FEE_POD_STATUS_NOT_ELIGIBLE Impossible d'estimer les mensualités pour un contrat n'ayant aucun POD actif.\t\nINVOICE_DATA_NOT_ANN_FORBIDDEN Fonctionnalité indisponible pour les rythmes de facturation saisonnalisée.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentMonthlyFeeResponse"
                }
              }
            }
          },
          "404": {
            "description": "TEMPLATE_NOT_FOUND Impossible de récupérer l'échéancier.\t\nANNUAL_CONSUMPTION_REFERENCE_NOT_FOUND Aucune car trouvée.\t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.\t\nCONTRAT_MONOSITE_NOT_FOUND Aucun contrat fourniture non multisite n'a été trouvé pour le client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentMonthlyFeeResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentMonthlyFeeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/meters": {
      "get": {
        "tags": [
          "meter-controller"
        ],
        "summary": "Retourne les informations des compteurs du contrat",
        "operationId": "getMeters",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "READING_TYPE_NOT_FOUND Le type d'index de consommation n'a pas été trouvé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterResponse"
                }
              }
            }
          },
          "409": {
            "description": "POD_TECHNICAL_INFO_INCONSISTENT Données techniques incohérentes dans flux",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/invoice-frequencies/available": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Renvoyer les informations du rythme de facturation",
        "operationId": "getInvoiceFrequencies",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "CONTRACT_MULTISITE_FORBIDDEN Ce web service n'autorise pas de contrat multisite.\t\nUPDATE_INVOICE_FREQUENCY_POD_STATUS_TERMINATE Impossible de modifier le rythme de facturation sur un contrat résilié, rétracté ou archivé.\t\nUPDATE_INVOICE_FREQUENCY_POD_STATUS_NOT_ACTIVE Impossible de modifier le rythme de facturation pour le moment, veuillez attendre l’activation de l'électricité et/ou du gaz.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFrequenciesResponseAvailable"
                }
              }
            }
          },
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible.\t\nOFFRE_NOT_FOUND Aucune offre pour le contrat cible.\t\nAPPORTEUR_AFFAIRE_NOT_FOUND L'apporteur d'affaire %s n'existe pas.\t\nDONNEES_FACTURATION_NOT_FOUND Les données de facturation n'existent pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFrequenciesResponseAvailable"
                }
              }
            }
          },
          "409": {
            "description": "UPDATE_INVOICE_FREQUENCY_UNDER_30_DAYS Le dernier changement de rythme de facturation date de moins de 30 jours.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFrequenciesResponseAvailable"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Récupère la liste des contacts d'un contrat donné",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "retourne la liste des contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "500": {
            "description": "inconstance des données",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/addresses": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Récupération d'un entité comportant une liste des adresses pour un contrat et un boolean si les adresses sont identiques",
        "operationId": "getAddresses",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }, {
            "name": "x-tenant-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "retourne la listes des addresses",
            "headers": {
              "similar-addresses": {
                "description": "retourne true si les deux addresses sont similaires sinon false",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "404": {
            "description": "id contrat n'existe pas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "500": {
            "description": "incohérence des données",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/pods/{pod-code}/termination-request": {
      "get": {
        "tags": [
          "resiliation-controller"
        ],
        "summary": "Afficher une demande de résiliation",
        "operationId": "getTerminationRequest",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pod-code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_REFERENCE_NOT_FOUND Le contrat n'existe pas pour la reference cible. \t\nPOD_NOT_FOUND Aucun pod trouvé dans ce contexte. \t\nCONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé. \t\nNOT_FOUND La demande de resiliation n'existe pas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminationRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/pods/{pod-code}/life-cycle-steps": {
      "get": {
        "tags": [
          "pod-controller"
        ],
        "summary": "Renvoie les différentes étapes du cycle de vie du contrat d'énergie d’un POD",
        "operationId": "getPodLifeCycleStep",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pod-code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRAT_FOURNITURE_NOT_FOUND Aucun contrat fourniture n'a été trouvé.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodLifeCycleResponse"
                }
              }
            }
          },
          "409": {
            "description": "NEVER_ACTIVATED Le pod n'a pas encore été activé.\t\nPOD_TECHNICAL_INFO_INCONSISTENT Données techniques incohérentes dans flux.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodLifeCycleResponse"
                }
              }
            }
          },
          "500": {
            "description": "EXTERNAL_CALL_ERROR Une erreur est survenue lors de l'appel à une api externe.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodLifeCycleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/payment-methods": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "get payment method corresponding to the contract",
        "operationId": "getContractPaymentMethod",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_NOT_FOUND Le contrat n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPaymentMethodResponse"
                }
              }
            }
          },
          "409": {
            "description": "BILLING_METHOD_INCONSISTENT Le contrat possède plus d'une methode de paiement active.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPaymentMethodResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/billing-configuration-history": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "get billing configuration history corresponding to the contract",
        "operationId": "getContractBillingConfigurationHistory",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_OR_BILLING_INFORMATION_NOT_FOUND Contract or billing informations not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractBillingConfigurationHistory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contract-id}/bank-details": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "get bank-detail corresponding to the contract",
        "operationId": "getContractBankDetail",
        "parameters": [
          {
            "name": "contract-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "CONTRACT_NOT_FOUND Le contrat n'existe pas pour la reference cible.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankDetail"
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED Vous n’avez pas les droits nécessaires pour consulter les coordonnées bancaires du contrat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/contact-and-consent": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "operationId": "findContractContactAndConsent",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactAndConsentContractResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/{contractId}/balance": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "summary": "Retourne les informations de la facturation",
        "operationId": "getContractBalance",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "callSage",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractBalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract/global-infos/refresh-views": {
      "get": {
        "tags": [
          "contract-controller"
        ],
        "operationId": "refreshContractGlobalInfosViews",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/auth/check": {
      "get": {
        "tags": [
          "authentification"
        ],
        "operationId": "initSsoToken",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/actuator/health": {
      "get": {
        "tags": [
          "health"
        ],
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/multisites/bill-consolidation/{billConsolidationId}/pods/{podId}": {
      "delete": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Ce service ne doit être utilisé qu’en cas de doublon de pod lors de l’intégration d’un site multisites dans ekko.",
        "operationId": "deleteDuplicatedPodFromMsContract",
        "parameters": [
          {
            "name": "billConsolidationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "podId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/multisites/pending/pod": {
      "delete": {
        "tags": [
          "multi-sites-controller"
        ],
        "summary": "Supprime un pod d'un site en cours d'intégration",
        "operationId": "deleteSiteEnCoursIntegration",
        "parameters": [
          {
            "name": "podCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/cti/retention": {
      "delete": {
        "tags": [
          "cti-controller"
        ],
        "summary": "Supprime les redirections de retention des 30 dernières minutes.",
        "operationId": "deleteRetention",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/cache": {
      "delete": {
        "tags": [
          "cache-controller"
        ],
        "summary": "Vide les caches de service et de produit du cdo",
        "operationId": "cleanCache",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/cache/{cacheName}": {
      "delete": {
        "tags": [
          "cache-controller"
        ],
        "summary": "Vide le cache en fonction du cacheName",
        "operationId": "cleanCacheByName",
        "parameters": [
          {
            "name": "cacheName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EnableVoltalisDTO": {
        "required": [
          "codeService",
          "refContrat"
        ],
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "codeService": {
            "type": "string"
          },
          "dateDebut": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "DisableVoltalisDTO": {
        "required": [
          "codeService",
          "refContrat"
        ],
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "codeService": {
            "type": "string"
          },
          "dateFin": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdateDatesRequestDTO": {
        "required": [
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdatePeriodeTarifaireDTO": {
        "required": [
          "codeGrille",
          "codeTarif",
          "idPeriodeTarifaire"
        ],
        "type": "object",
        "properties": {
          "idPeriodeTarifaire": {
            "type": "integer",
            "format": "int32"
          },
          "codeGrille": {
            "type": "string"
          },
          "codeTarif": {
            "type": "string"
          }
        }
      },
      "UpdateDatePeriodeTarifaireDTO": {
        "required": [
          "idPeriodeTarifaire"
        ],
        "type": "object",
        "properties": {
          "idPeriodeTarifaire": {
            "type": "integer",
            "format": "int32"
          },
          "dateRenouvellement": {
            "type": "string",
            "format": "date"
          },
          "dateDebut": {
            "type": "string",
            "format": "date"
          },
          "dateFin": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdateOffreDTO": {
        "required": [
          "codeCommercial",
          "codeOffre",
          "idOffre",
          "nomOffre"
        ],
        "type": "object",
        "properties": {
          "idOffre": {
            "type": "integer",
            "format": "int32"
          },
          "codeCommercial": {
            "type": "string"
          },
          "codeOffre": {
            "type": "string"
          },
          "nomOffre": {
            "type": "string"
          }
        }
      },
      "UpdateDateOffreDTO": {
        "required": [
          "idOffre"
        ],
        "type": "object",
        "properties": {
          "idOffre": {
            "type": "integer",
            "format": "int32"
          },
          "dateDebut": {
            "type": "string",
            "format": "date"
          },
          "dateFin": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdateContratRequestDTO": {
        "required": [
          "newReferenceContrat",
          "oldReferenceContrat"
        ],
        "type": "object",
        "properties": {
          "oldReferenceContrat": {
            "type": "string"
          },
          "newReferenceContrat": {
            "type": "string"
          }
        }
      },
      "UpdateContratDateProchaineFactureRequestDTO": {
        "required": [
          "dateProchaineFacture"
        ],
        "type": "object",
        "properties": {
          "dateProchaineFacture": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdateContratFournitureDTO": {
        "required": [
          "podCode",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          }
        }
      },
      "ResponseUpdateContratFournitureDTO": {
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SponsorshipLoyaltyPointRequestDTO": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "operationType": {
            "type": "string"
          },
          "loyaltyPoint": {
            "type": "integer",
            "format": "int32"
          },
          "commentary": {
            "type": "string"
          }
        }
      },
      "SponsorshipLoyaltyPointResponseDTO": {
        "type": "object",
        "properties": {
          "loyaltyPoint": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TerminationRequest": {
        "required": [
          "codePod",
          "dateResiliationSouhaitee",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "nomGroupe": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "dateResiliationSouhaitee": {
            "type": "string",
            "format": "date"
          },
          "commentaireIntervention": {
            "type": "string"
          },
          "indexResiliationBaseHp": {
            "type": "integer",
            "format": "int32"
          },
          "passageZeroBaseHp": {
            "type": "boolean"
          },
          "indexResiliationHc": {
            "type": "integer",
            "format": "int32"
          },
          "passageZeroHc": {
            "type": "boolean"
          }
        }
      },
      "ErrorDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "technicalMessage": {
            "type": "string"
          },
          "publicMessage": {
            "type": "string"
          }
        }
      },
      "TerminationResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDTO"
            }
          },
          "message": {
            "type": "string"
          },
          "demandeResiliation": {
            "type": "boolean"
          }
        }
      },
      "IndexeDTO": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string"
          },
          "indexe": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PodTerminateRequestDTO": {
        "required": [
          "codePod",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "terminationReason": {
            "type": "string"
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexeDTO"
            }
          }
        }
      },
      "UpdatePaymentMethodRequestDto": {
        "type": "object",
        "properties": {
          "paymentModeCode": {
            "type": "string",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "iban": {
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM"
          },
          "bic": {
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM"
          },
          "bankName": {
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM"
          }
        },
        "description": "DTO d'entrée pour mettre à jour le mode de prélèvement"
      },
      "DefaultEkkoResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "UpdateDateDebutSouhaiteeRequestMsDTO": {
        "required": [
          "codePod",
          "codeStatut",
          "dateDebutSouhaitee",
          "refContrat"
        ],
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "codePod": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string"
          },
          "codeStatut": {
            "type": "integer",
            "format": "int32"
          },
          "dateDebutSouhaitee": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MovePodContractRequestMsDTO": {
        "required": [
          "newContractReference",
          "oldContractReference",
          "podCode"
        ],
        "type": "object",
        "properties": {
          "podCode": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string",
            "example": "07509117183549"
          },
          "oldContractReference": {
            "type": "string",
            "example": "CTR000000000"
          },
          "newContractReference": {
            "type": "string",
            "example": "CTR000000001"
          }
        },
        "description": "DTO pour rattacher un POD multisite à un autre regroupement de factures que celui auquel il a été rattaché précédemment"
      },
      "UpdateContractRequestMsDTO": {
        "required": [
          "nomContrat",
          "service"
        ],
        "type": "object",
        "properties": {
          "numeroMarche": {
            "type": "string",
            "example": "432-HIFO8"
          },
          "bonDeCommande": {
            "type": "string",
            "example": "TEST"
          },
          "centreCout": {
            "type": "string",
            "example": "JFLKDS FDS"
          },
          "service": {
            "type": "string",
            "example": "Comptabilité"
          },
          "nomContrat": {
            "type": "string",
            "example": "RES DES SEMIS"
          }
        }
      },
      "UpdateStatusRequestMsDTO": {
        "required": [
          "codeStatus",
          "podCode",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "codeStatus": {
            "type": "integer",
            "format": "int32"
          },
          "referenceContrat": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          }
        }
      },
      "UpdateLevyDayRequestDTO": {
        "required": [
          "contractId",
          "levyDay"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "levyDay": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomerEquipmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "origin": {
            "type": "string"
          },
          "seniority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateCustomerHousingProfileRequestDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean"
          },
          "peopleNumber": {
            "type": "integer",
            "format": "int32"
          },
          "housingType": {
            "type": "string"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          },
          "outside": {
            "type": "boolean"
          },
          "isInsulated": {
            "type": "string",
            "enum": [
              "OUI",
              "NON",
              "NE_SAIT_PAS"
            ]
          },
          "constructionYear": {
            "type": "string"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "elecProvider": {
            "type": "string"
          },
          "gasProvider": {
            "type": "string"
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentDto"
            }
          },
          "declaredPower": {
            "type": "number",
            "format": "double"
          },
          "cookingHeatingType": {
            "type": "string"
          },
          "connectedToGas": {
            "type": "boolean"
          }
        }
      },
      "UpdateCustomerHousingProfileResponseDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean"
          },
          "peopleNumber": {
            "type": "integer",
            "format": "int32"
          },
          "housingType": {
            "type": "string"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          },
          "outside": {
            "type": "boolean"
          },
          "isInsulated": {
            "type": "string"
          },
          "constructionYear": {
            "type": "string"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "elecProvider": {
            "type": "string"
          },
          "gasProvider": {
            "type": "string"
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentDto"
            }
          },
          "declaredPower": {
            "type": "number",
            "format": "double"
          },
          "connectedToGas": {
            "type": "boolean"
          },
          "cookingHeatingType": {
            "type": "string"
          }
        }
      },
      "UpdateCustomerCompanyRequestDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string"
          },
          "siret": {
            "type": "string"
          },
          "apeCode": {
            "type": "string"
          },
          "referent": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "CustomerUpdateContactUtilisateurRequestDto": {
        "required": [
          "email",
          "lastname"
        ],
        "type": "object",
        "properties": {
          "civility": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobilePhone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CustomerUpdateContactUtilisateurResponseDto": {
        "type": "object",
        "properties": {
          "civility": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CustomerUpdateContactEmailSendConfirmRequestDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "customerRef": {
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          }
        }
      },
      "UpdateCustomerAddressRequestDto": {
        "required": [
          "municipality",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string",
            "example": "15"
          },
          "street": {
            "type": "string",
            "example": "rue ERNEST LAVAL"
          },
          "additionalAddress": {
            "type": "string",
            "example": "Logement 1"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "38000"
          },
          "municipality": {
            "type": "string",
            "example": "PARIS"
          },
          "building": {
            "type": "string",
            "example": "B2"
          },
          "staircase": {
            "type": "string",
            "example": "2"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "flat": {
            "type": "string",
            "example": "46"
          },
          "inseeCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "04355"
          }
        },
        "description": "Requête pour modifier l'adresse du client "
      },
      "CustomerAddressResponseDto": {
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string",
            "example": "15"
          },
          "street": {
            "type": "string",
            "example": "rue ERNEST LAVAL"
          },
          "additionalAddress": {
            "type": "string",
            "example": "Logement 1"
          },
          "zipCode": {
            "type": "string",
            "example": "38000"
          },
          "inseeCode": {
            "type": "string",
            "example": "04355"
          },
          "municipality": {
            "type": "string",
            "example": "PARIS"
          },
          "building": {
            "type": "string",
            "example": "B2"
          },
          "staircase": {
            "type": "string",
            "example": "2"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "flat": {
            "type": "string",
            "example": "46"
          },
          "uuid": {
            "type": "string",
            "example": "ecd84e8b-c938-49fd-b3aa-38c2c1d20756"
          }
        },
        "description": "Informations concernant l'adresse du client "
      },
      "UpdateCustomerDataRequestDto": {
        "required": [
          "birthday",
          "customerServiceTeam",
          "firstNameUseForbidden",
          "profile"
        ],
        "type": "object",
        "properties": {
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "profile": {
            "type": "integer",
            "format": "int32"
          },
          "customerServiceTeam": {
            "type": "integer",
            "format": "int32"
          },
          "firstNameUseForbidden": {
            "type": "boolean"
          },
          "scoring": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "DTO requête pour modifier les données clients"
      },
      "CustomerAttributesDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "RevokeCustomerConsentRequestRequest": {
        "required": [
          "consentType",
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@ekwateur.fr"
          },
          "mobilePhone": {
            "type": "string",
            "example": "0606060606"
          },
          "consentType": {
            "type": "string",
            "enum": [
              "NIGHTWATCH",
              "OFFRES_EKWATEUR",
              "COLLECTE_IDX",
              "COLLECTE_CDC",
              "P_MAX",
              "ENREGISTREMENT_CONSO"
            ]
          },
          "podCode": {
            "type": "string",
            "example": "789719729198127"
          },
          "outsideEnergyContract": {
            "type": "boolean",
            "example": true,
            "default": false
          }
        },
        "description": "Requête pour supprimer un consentement"
      },
      "CustomerUpdateEmailRequestDto": {
        "type": "object",
        "properties": {
          "contratReference": {
            "type": "string"
          },
          "typeContact": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "CustomerUpdateContactEmailRequestDto": {
        "required": [
          "customerRef",
          "email"
        ],
        "type": "object",
        "properties": {
          "customerRef": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          }
        },
        "description": "DTO pour mettre à jour l'email d'un contact"
      },
      "ConfirmContactEmailResponseDto": {
        "type": "object",
        "properties": {
          "contractRef": {
            "type": "array",
            "example": "CTR000000000",
            "items": {
              "type": "string",
              "example": "CTR000000000"
            }
          },
          "email": {
            "type": "string",
            "example": "test@ekwateur.fr"
          }
        },
        "description": "DTO réponse pour la confirmation d'un email"
      },
      "CadranDTO": {
        "type": "object",
        "properties": {
          "classeTemporelle": {
            "type": "string"
          },
          "car": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PodTechnicalInformationsRequestDTO": {
        "required": [
          "pod"
        ],
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "pod": {
            "type": "string"
          },
          "ot": {
            "type": "integer",
            "format": "int32"
          },
          "puissance": {
            "type": "number",
            "format": "double"
          },
          "typeCompteur": {
            "type": "string"
          },
          "communiquant": {
            "type": "boolean"
          },
          "tarifAcheminement": {
            "type": "string",
            "enum": [
              "CU4",
              "MU4",
              "CU",
              "CU_ST",
              "CUST",
              "MU",
              "MUDT",
              "LU",
              "T1",
              "T2",
              "T3",
              "T4",
              "TF",
              "TB",
              "BTINFLUSC",
              "BTINFCUST",
              "BTINFMUDT",
              "BTINFLU",
              "BTINFCU4",
              "BTINFMU4",
              "BTSUPLU4",
              "BTSUPCU4",
              "MU_DT"
            ]
          },
          "profilConsommation": {
            "type": "string"
          },
          "typeResiliation": {
            "type": "string"
          },
          "pcs": {
            "type": "number",
            "format": "double"
          },
          "dtr": {
            "type": "string",
            "format": "date"
          },
          "cadrans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadranDTO"
            }
          },
          "matriculeCompteur": {
            "type": "string"
          },
          "siGrd": {
            "type": "string"
          }
        }
      },
      "StatusRequestDTO": {
        "required": [
          "podCode",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          }
        }
      },
      "RenewalTariffTypeRequest": {
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "productTariffType": {
            "type": "string",
            "enum": [
              "FIXE",
              "VARIABLE"
            ]
          }
        }
      },
      "MonthlyFee": {
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "templateNumber": {
            "type": "string",
            "example": "ECH00000000"
          },
          "current": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "annualConsumptionReference": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "recommended": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "recommendedMin": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "recommendedMax": {
            "type": "integer",
            "format": "int32",
            "example": 20
          }
        },
        "description": "Dto avec les informations d'une mensualité"
      },
      "SaveMonthlyFeeRequest": {
        "type": "object",
        "properties": {
          "monthlyFees": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyFee"
            }
          }
        },
        "description": "Dto avec les informations des nouvelles mensualités à sauvegarder"
      },
      "ContractUpdateCodePodRequest": {
        "required": [
          "newPod",
          "oldPod"
        ],
        "type": "object",
        "properties": {
          "oldPod": {
            "type": "string"
          },
          "newPod": {
            "type": "string"
          }
        }
      },
      "ContractUpdateContactRequest": {
        "required": [
          "birthday",
          "civility",
          "email",
          "firstName",
          "lastName",
          "typeContact"
        ],
        "type": "object",
        "properties": {
          "typeContact": {
            "type": "string",
            "enum": [
              "FACTURATION",
              "CONSOMMATION",
              "FACTURATION_CONSOMMATION",
              "UTILISATEUR",
              "SIGNATORY",
              "OPERATIONAL"
            ]
          },
          "civility": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "example": "0101010101"
          },
          "mobilePhone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "example": "0606060606"
          },
          "civility2": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "lastName2": {
            "type": "string",
            "example": "nom2"
          },
          "firstName2": {
            "type": "string",
            "example": "prénom2"
          }
        },
        "description": "DTO pour mettre à jour le contact"
      },
      "UpdateInvoiceSendingChannelRequest": {
        "required": [
          "billingChanelCode"
        ],
        "type": "object",
        "properties": {
          "billingChanelCode": {
            "type": "string"
          }
        }
      },
      "UpdateInvoiceSendingChannelResponse": {
        "type": "object",
        "properties": {
          "billingChanelCode": {
            "type": "string"
          }
        }
      },
      "CreatePodRequestMsDTOV2": {
        "required": [
          "civilite",
          "codePod",
          "codePostal",
          "commune",
          "dateDebutSouhaitee",
          "energie",
          "libelleVoie",
          "mail",
          "nom",
          "referenceContrat",
          "typeCompteur"
        ],
        "type": "object",
        "properties": {
          "prestation": {
            "type": "string",
            "enum": [
              "MES",
              "CHF"
            ]
          },
          "communiquant": {
            "type": "boolean",
            "example": true
          },
          "referenceContrat": {
            "type": "string"
          },
          "energie": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "codePod": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string"
          },
          "codeAnalytique": {
            "type": "string",
            "example": "MI5PLTF033"
          },
          "dateDebutSouhaitee": {
            "type": "string",
            "format": "date"
          },
          "denominationFacture": {
            "type": "string",
            "example": "10"
          },
          "numeroVoie": {
            "type": "string",
            "example": "1"
          },
          "libelleVoie": {
            "type": "string"
          },
          "codePostal": {
            "type": "string"
          },
          "codeInsee": {
            "type": "string",
            "example": "45234"
          },
          "commune": {
            "type": "string"
          },
          "civilite": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "prenom": {
            "type": "string",
            "example": "CELINE"
          },
          "nom": {
            "type": "string"
          },
          "telFixe": {
            "type": "string",
            "example": "0101010101"
          },
          "telMobile": {
            "type": "string",
            "example": "0606060606"
          },
          "mail": {
            "type": "string"
          },
          "dtr": {
            "type": "string",
            "format": "date",
            "example": "2021-06-17"
          },
          "typeCompteur": {
            "type": "string"
          },
          "matriculeCompteur": {
            "type": "string",
            "example": "039"
          },
          "ot": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "profileConsommation": {
            "type": "string",
            "example": "PRO1"
          },
          "puissance": {
            "type": "number",
            "example": 9.0
          },
          "tarifAcheminement": {
            "type": "string",
            "enum": [
              "CU4",
              "MU4",
              "CU",
              "CU_ST",
              "CUST",
              "MU",
              "MUDT",
              "LU",
              "T1",
              "T2",
              "T3",
              "T4",
              "TF",
              "TB",
              "BTINFLUSC",
              "BTINFCUST",
              "BTINFMUDT",
              "BTINFLU",
              "BTINFCU4",
              "BTINFMU4",
              "BTSUPLU4",
              "BTSUPCU4",
              "MU_DT"
            ]
          },
          "carBaseHp": {
            "type": "integer",
            "format": "int32",
            "example": 5511
          },
          "carHc": {
            "type": "integer",
            "format": "int32",
            "example": 13329
          },
          "indexBasculeBaseHp": {
            "type": "integer",
            "format": "int32",
            "example": 1000
          },
          "indexBasculeHc": {
            "type": "integer",
            "format": "int32",
            "example": 500
          },
          "siGrd": {
            "type": "string",
            "example": "GINKO"
          },
          "etatTic": {
            "type": "string",
            "example": "ALIMENTE"
          }
        },
        "description": "DTO request pour créer un pod"
      },
      "CreateGroupRequest": {
        "required": [
          "contract",
          "customerServiceEmail",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "CHANEL"
          },
          "customerServiceEmail": {
            "type": "string",
            "example": "dev@ekwateur.fr"
          },
          "contract": {
            "$ref": "#/components/schemas/GroupContractSignatureDetails"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupContactDetails"
            }
          },
          "customerAreaAdminAccount": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerSupportTeamCode": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "DTO pour créer le groupe"
      },
      "FlexibilityDetails": {
        "type": "object",
        "properties": {
          "upwardFlexibilityValue": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "downwardFlexibilityValue": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "unit": {
            "type": "string",
            "example": "CONSUMPTION",
            "enum": [
              "CONSUMPTION",
              "SITES_COUNT"
            ]
          }
        }
      },
      "GroupContactDetails": {
        "required": [
          "civility",
          "email",
          "firstName",
          "lastName",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FACTURATION",
              "CONSOMMATION",
              "FACTURATION_CONSOMMATION",
              "UTILISATEUR",
              "SIGNATORY",
              "OPERATIONAL"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "example": "0101010101"
          },
          "mobilePhone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "example": "0606060606"
          }
        },
        "description": "DTO avec les infos du contact"
      },
      "GroupContractSignatureDetails": {
        "required": [
          "applicationDate",
          "signatureDate"
        ],
        "type": "object",
        "properties": {
          "signatureDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "applicationDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "hasTacitRenewalAgreement": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "hasSmartMeterConsent": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "flexibility": {
            "$ref": "#/components/schemas/FlexibilityDetails"
          }
        },
        "description": "DTO avec les infos du contrat"
      },
      "CreateGroupResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }
      },
      "UserRequestDto": {
        "required": [
          "email",
          "firstname",
          "helpCenter",
          "lastname",
          "role",
          "ssoToken"
        ],
        "type": "object",
        "properties": {
          "lastname": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ssoToken": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "helpCenter": {
            "type": "string"
          }
        }
      },
      "UpdateDureePeriodeTarifaireDTO": {
        "type": "object",
        "properties": {
          "idPeriodeTarifaire": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RenewalRequestDTO": {
        "required": [
          "renewalDate"
        ],
        "type": "object",
        "properties": {
          "renewalDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "MailingRenewalRequestDTO": {
        "required": [
          "renewalDate"
        ],
        "type": "object",
        "properties": {
          "renewalDate": {
            "type": "string",
            "format": "date"
          },
          "sendMail": {
            "type": "boolean"
          }
        }
      },
      "SponsorRequestDTO": {
        "type": "object",
        "properties": {
          "sponsoredCustomerId": {
            "type": "string"
          },
          "sponsoredContractReference": {
            "type": "string"
          },
          "sponsorCustomerId": {
            "type": "string"
          }
        }
      },
      "SponsorResponseDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "CreateServiceDTO": {
        "type": "object",
        "properties": {
          "codeService": {
            "type": "string"
          },
          "codeTarif": {
            "type": "number",
            "format": "double"
          },
          "codeGrille": {
            "type": "string"
          },
          "dateAcceptation": {
            "type": "string",
            "format": "date"
          },
          "dateDebut": {
            "type": "string",
            "format": "date"
          },
          "dateFin": {
            "type": "string",
            "format": "date"
          },
          "energie": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "pod": {
            "type": "string"
          },
          "quantite": {
            "type": "integer",
            "format": "int32"
          },
          "car": {
            "type": "integer",
            "format": "int32"
          },
          "codeStock": {
            "type": "string"
          },
          "dateDispoDebut": {
            "type": "string",
            "format": "date"
          },
          "dateDispoFin": {
            "type": "string",
            "format": "date"
          },
          "unite": {
            "type": "string"
          },
          "modeRetrait": {
            "type": "string"
          }
        }
      },
      "CreateServicesDTO": {
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateServiceDTO"
            }
          },
          "ajoutEcheancier": {
            "type": "boolean"
          },
          "envoieMail": {
            "type": "boolean"
          }
        }
      },
      "CreateServiceAdvantageDTO": {
        "required": [
          "idService"
        ],
        "type": "object",
        "properties": {
          "idService": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Requête pour ajouter un avantage à un service"
      },
      "ContratFournitureGenericRequest": {
        "required": [
          "podCode",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          }
        }
      },
      "DemandeResiliationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "dateResiliationSouhaitee": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CreateQuotationRequest": {
        "required": [
          "businessProvider",
          "contractReference",
          "offer",
          "pods",
          "sellingChannelCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "sellingChannelCode": {
            "type": "string",
            "description": "Code canal de vente. Liste des valeurs dans la table ref_canal_vente : EKKO,RUBAN,EC...",
            "example": "RUBAN"
          },
          "businessProvider": {
            "type": "string",
            "description": "Apporteur d'affaire pour le devis. Liste des valeurs dans CDO.",
            "example": "EKW"
          },
          "type": {
            "type": "string",
            "description": "Type du devis. Valeurs possible table : ref_type_devis. /!\\ Uniquement ADD_ENERGY pour le moment.",
            "example": "ADD_ENERGY"
          },
          "contractReference": {
            "type": "string",
            "description": "Contrat concerné par le devis.",
            "example": "CTRXXXXXXXX"
          },
          "coolingOffPeriodByPassed": {
            "type": "boolean",
            "description": "si true on bypass le delai de retractation.",
            "example": true
          },
          "pods": {
            "type": "array",
            "description": "Liste des pods nécessaire pour le devis. Au moins 1.",
            "items": {
              "$ref": "#/components/schemas/QuotationPod"
            }
          },
          "offer": {
            "$ref": "#/components/schemas/QuotationOffer"
          }
        },
        "description": "Données nécessaire à la création d'un devis"
      },
      "QuotationOffer": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EEKWRESSD01"
          },
          "products": {
            "type": "array",
            "description": "Liste des produits souhaités de l'offre.",
            "items": {
              "$ref": "#/components/schemas/QuotationProduct"
            }
          },
          "services": {
            "type": "array",
            "description": "Liste des services souhaitées de l'offre",
            "items": {
              "$ref": "#/components/schemas/QuotationService"
            }
          }
        },
        "description": "Informations de l'offre nécessaires pour le devis."
      },
      "QuotationPod": {
        "required": [
          "code",
          "energy"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "12345678901234"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "annualConsumptionReferenceBase": {
            "type": "integer",
            "format": "int32",
            "example": 1000
          },
          "annualConsumptionReferenceLow": {
            "type": "integer",
            "format": "int32",
            "example": 2000
          },
          "power": {
            "type": "number",
            "format": "double",
            "example": 9.0
          }
        },
        "description": "Informations du pod nécessaires pour le devis."
      },
      "QuotationProduct": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EPVA100002"
          },
          "monthlyInstallment": {
            "type": "integer",
            "format": "int32"
          },
          "activationDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Informations du produit nécessaires pour le devis."
      },
      "QuotationService": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AGO32"
          }
        },
        "description": "Informations du service nécessaires pour le devis."
      },
      "ConsumptionPrices": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string",
            "example": "BASE",
            "enum": [
              "BASE",
              "HP",
              "HC",
              "HPH",
              "HCH",
              "HPB",
              "HCB"
            ]
          },
          "exclTaxes": {
            "type": "number",
            "example": 0.1234
          },
          "inclTaxes": {
            "type": "number",
            "example": 0.1456
          }
        }
      },
      "CreateQuotationResponse": {
        "type": "object",
        "properties": {
          "idQuotation": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "sellingChannelCode": {
            "type": "string",
            "example": "RUBAN"
          },
          "businessProvider": {
            "type": "string",
            "example": "EKW"
          },
          "type": {
            "type": "string",
            "example": "ADD_ENERGY"
          },
          "customerReference": {
            "type": "string",
            "example": "EKWXXXXXXXX"
          },
          "contractReference": {
            "type": "string",
            "example": "CTRXXXXXXXX"
          },
          "coolingOffPeriodBypassed": {
            "type": "boolean",
            "example": true
          },
          "pods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotationPodInfos"
            }
          },
          "requestedOffer": {
            "$ref": "#/components/schemas/QuotationEstimatedOffer"
          },
          "currentOffer": {
            "$ref": "#/components/schemas/QuotationCurrentOfferEstimated"
          }
        },
        "description": "Données estimées du devis."
      },
      "QuotationCurrentOfferEstimated": {
        "type": "object",
        "properties": {
          "offerCode": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "energyEnum": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "consumptionBasePrice": {
            "$ref": "#/components/schemas/QuotationCurrentOfferPrices"
          },
          "consumptionLowPrice": {
            "$ref": "#/components/schemas/QuotationCurrentOfferPrices"
          },
          "subscriptionPrices": {
            "$ref": "#/components/schemas/QuotationCurrentOfferPrices"
          },
          "annualPrices": {
            "$ref": "#/components/schemas/QuotationCurrentOfferPrices"
          }
        }
      },
      "QuotationCurrentOfferPrices": {
        "type": "object",
        "properties": {
          "exclTaxes": {
            "type": "number"
          },
          "inclTaxes": {
            "type": "number"
          }
        }
      },
      "QuotationEstimatedOffer": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EKWRESSD01"
          },
          "name": {
            "type": "string",
            "example": "Electricité 100% renouvelable et Gaz Naturel"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotationEstimatedService"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotationEstimatedProduct"
            }
          }
        }
      },
      "QuotationEstimatedProduct": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EPVA100002"
          },
          "name": {
            "type": "string",
            "example": "Electricité renouvelable variable"
          },
          "monthlyInstallment": {
            "type": "number",
            "example": 45
          },
          "maxMonthlyInstallment": {
            "type": "number",
            "example": 54
          },
          "minMonthlyInstallment": {
            "type": "number",
            "example": 40
          },
          "idealMonthlyInstallment": {
            "type": "number",
            "example": 47
          },
          "consumptionPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionPrices"
            }
          },
          "annualAmount": {
            "type": "number",
            "example": 597
          }
        }
      },
      "QuotationEstimatedService": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AGO24"
          },
          "energy": {
            "type": "string",
            "example": "ELEC"
          },
          "type": {
            "type": "string",
            "example": "KHW"
          },
          "unitPriceInclVat": {
            "type": "number",
            "example": 0.01
          },
          "annualAmountInclVat": {
            "type": "number",
            "example": 8.982000356912613
          }
        }
      },
      "QuotationPodInfos": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "12345678901234"
          },
          "energy": {
            "type": "string",
            "example": "ELEC"
          },
          "annualConsumptionReferenceBase": {
            "type": "integer",
            "format": "int32",
            "example": 3102
          },
          "annualConsumptionReferenceLow": {
            "type": "integer",
            "format": "int32",
            "example": 3102
          },
          "power": {
            "type": "number",
            "format": "double",
            "example": 9.0
          },
          "tariffOption": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "nextIndexReadingDate": {
            "type": "string",
            "format": "date",
            "example": "2022-02-03"
          },
          "distributionGridOperatorCode": {
            "type": "string",
            "example": "GINKO"
          },
          "meterSerialNumber": {
            "type": "string",
            "example": "018"
          },
          "consumptionProfileCode": {
            "type": "string",
            "example": "RES11"
          },
          "meterType": {
            "type": "string",
            "example": "LINKY"
          },
          "higherHeatingValue": {
            "type": "number",
            "format": "double",
            "example": 2.3
          },
          "routingTariff": {
            "type": "string",
            "example": "MU4"
          },
          "serviceOption": {
            "type": "string",
            "example": "SANS INTERVENTION"
          },
          "smartMeter": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "Données techniques du pod du devis."
      },
      "GetPodTechnicalInfoRequestDTO": {
        "required": [
          "energy",
          "inseeCode",
          "podCode",
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "podCode": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          }
        }
      },
      "GetPodTechnicalInfoResponseDTO": {
        "type": "object",
        "properties": {
          "codeInsee": {
            "type": "string"
          },
          "ot": {
            "type": "integer",
            "format": "int32"
          },
          "puissance": {
            "type": "number",
            "format": "double"
          },
          "siGrd": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "zoneTarifaire": {
            "type": "string"
          },
          "dtr": {
            "type": "string",
            "format": "date"
          },
          "classeConsoSmart": {
            "type": "string"
          },
          "classeConsommation": {
            "type": "string"
          },
          "matriculeCompteur": {
            "type": "string"
          },
          "etatTic": {
            "type": "string"
          },
          "etatCompteur": {
            "type": "string"
          },
          "tarifAcheminement": {
            "type": "string"
          },
          "typeCompteur": {
            "type": "string"
          },
          "communiquant": {
            "type": "boolean"
          },
          "carHc": {
            "type": "integer",
            "format": "int32"
          },
          "carBaseHp": {
            "type": "integer",
            "format": "int32"
          },
          "profileConsommation": {
            "type": "string"
          },
          "energie": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "indexReelNecessaire": {
            "type": "boolean"
          },
          "optionDePrestation": {
            "type": "string"
          },
          "messageErreur": {
            "type": "string"
          }
        }
      },
      "ContractPodFilterMsEcDTO": {
        "required": [
          "contractId"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "sites": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomerContractPodMsEcDTO": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPodFilterMsEcDTO"
            }
          }
        }
      },
      "GetPodRequestMsEcDTO": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "group": {
            "type": "string"
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContractPodMsEcDTO"
            }
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "PaginationRequest": {
        "required": [
          "numberOfElements",
          "pageNumber"
        ],
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "orderBy": {
            "type": "string",
            "description": "Toutes les valeurs ne sont pas acceptées par tous les DTO. Ce référer aux champs du DTO d'entrée, ou à ceux de/des tables filtrées.",
            "enum": [
              "CUSTOMER_ID",
              "CONTRACT_ID",
              "CONTRACT_NAME",
              "POD_CODE",
              "POD_NAME",
              "ENERGY",
              "STATUS",
              "COST_CENTER",
              "ORDER_ID",
              "SERVICE",
              "CONTACT_FACTU",
              "MAIL_FACTU",
              "PHONE_FACTU",
              "MOBILE_PHONE_FACTU",
              "ADDRESS_FACTU",
              "CONTACT_CONSO",
              "MAIL_CONSO",
              "PHONE_CONSO",
              "MOBILE_PHONE_CONSO",
              "ADDRESS_CONSO",
              "CREATED",
              "PROCESS_NAME",
              "OLD_VALUE",
              "NEW_VALUE",
              "CHANNEL",
              "USER",
              "AMOUNT",
              "NOTE",
              "REFERENCE",
              "URL",
              "TYPE",
              "PROCESS",
              "CHILD_PROCESS",
              "ACTION",
              "DEADLINE",
              "DATE",
              "NAME"
            ]
          },
          "orderByDirection": {
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ]
          }
        },
        "description": "DTO request de pagination"
      },
      "AddressPodMsEcDTO": {
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "additionalAddress": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "ContactPodMsEcDTO": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          }
        }
      },
      "ContractPodMsEcDTO": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerPodMsEcDTO"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactPodMsEcDTO"
          },
          "address": {
            "$ref": "#/components/schemas/AddressPodMsEcDTO"
          }
        }
      },
      "CustomerPodMsEcDTO": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          },
          "podName": {
            "type": "string"
          },
          "energy": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supplyStartDate": {
            "type": "string",
            "format": "date"
          },
          "supplyEndDate": {
            "type": "string",
            "format": "date"
          },
          "accountingCode": {
            "type": "string"
          }
        }
      },
      "GetPodResponseMsEcDTO": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPodMsEcDTO"
            }
          }
        }
      },
      "PaginationResponse": {
        "type": "object",
        "properties": {
          "totalPage": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "totalElements": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "currentPage": {
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "DTO réponse de pagination"
      },
      "CheckPodRequestDTO": {
        "required": [
          "podCode"
        ],
        "type": "object",
        "properties": {
          "podCode": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string"
          },
          "contractId": {
            "type": "string"
          }
        }
      },
      "SiteEnCoursIntegrationInfoRequestMsDTO": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "statut": {
            "type": "string"
          },
          "energie": {
            "type": "string"
          },
          "siGrd": {
            "type": "string"
          },
          "filtre": {
            "type": "string"
          }
        }
      },
      "ErreurSiteEnCoursIntegrationDTO": {
        "type": "object",
        "properties": {
          "champ": {
            "type": "string"
          },
          "erreur": {
            "type": "string",
            "enum": [
              "CONTRACT_ID_NOT_FOUND",
              "INCORRECT_VALUE",
              "EMPTY"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SiteEnCoursIntegrationInfoResponseDTO": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "groupe": {
            "type": "string"
          },
          "referenceClient": {
            "type": "string"
          },
          "denominationFacture": {
            "type": "string"
          },
          "referenceContrat": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "codeAnalytique": {
            "type": "string"
          },
          "energie": {
            "type": "string"
          },
          "dateDebutSouhaitee": {
            "type": "string"
          },
          "dtr": {
            "type": "string"
          },
          "numeroVoie": {
            "type": "string"
          },
          "libelleVoie": {
            "type": "string"
          },
          "complementAdresse": {
            "type": "string"
          },
          "codePostal": {
            "type": "string"
          },
          "codeInsee": {
            "type": "string"
          },
          "commune": {
            "type": "string"
          },
          "civilite": {
            "type": "string"
          },
          "prenom": {
            "type": "string"
          },
          "nom": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "telFixe": {
            "type": "string"
          },
          "telMobile": {
            "type": "string"
          },
          "codeGrille": {
            "type": "string"
          },
          "siGrd": {
            "type": "string"
          },
          "prestation": {
            "type": "string"
          },
          "optionDePrestation": {
            "type": "string"
          },
          "etatCompteur": {
            "type": "string"
          },
          "puissance": {
            "type": "string"
          },
          "ot": {
            "type": "string"
          },
          "tarifAcheminement": {
            "type": "string"
          },
          "carBaseHp": {
            "type": "string"
          },
          "carHc": {
            "type": "string"
          },
          "profilConsommation": {
            "type": "string"
          },
          "matriculeCompteur": {
            "type": "string"
          },
          "typeCompteur": {
            "type": "string"
          },
          "statutIntegration": {
            "type": "string"
          },
          "communiquant": {
            "type": "boolean"
          },
          "champsErreur": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErreurSiteEnCoursIntegrationDTO"
            }
          }
        }
      },
      "SiteEnCoursIntegrationInfoResponseMsDTOs": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "siteEnCoursIntegrationInfoResponseDTOList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteEnCoursIntegrationInfoResponseDTO"
            }
          }
        }
      },
      "AddressDataImportDto": {
        "required": [
          "city",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "streetNumber": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "12"
          },
          "street": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "rue de la Rochefoucauld"
          },
          "zipCode": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "75009"
          },
          "inseeCode": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "75009"
          },
          "city": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "Paris"
          },
          "additionalAddress": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "2ème étage"
          }
        }
      },
      "CreateSitesImportDataMs": {
        "required": [
          "contractId"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerDataImportDto"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDataImportDto"
          },
          "pod": {
            "$ref": "#/components/schemas/PodImportSiteDto"
          },
          "contractId": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "CTR00000000"
          },
          "analyticalCode": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string"
          },
          "invoiceName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "SEN SANNOIS"
          }
        },
        "description": "DTO avec les infos du client à importer"
      },
      "CreateSitesImportRequestMs": {
        "type": "object",
        "properties": {
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSitesImportDataMs"
            }
          }
        },
        "description": "DTO de requête pour créer des sites en masse"
      },
      "CustomerDataImportDto": {
        "required": [
          "civility",
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "civility": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "M.",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "firstName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "Jean"
          },
          "lastName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "DUPONT"
          },
          "phone": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "0101010101"
          },
          "mobilePhone": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "0606060606"
          },
          "email": {
            "type": "string",
            "example": "test@ekwateur.fr"
          }
        },
        "description": "DTO avec les infos du client sur lequel le site ou regroupement est importé"
      },
      "PodImportSiteDto": {
        "required": [
          "desiredStartDate",
          "energy",
          "podCode"
        ],
        "type": "object",
        "properties": {
          "annualConsumptionReferenceBase": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "annualConsumptionReferenceLow": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "podCode": {
            "pattern": "^[^\\+\\.\\;]*$",
            "type": "string",
            "example": "189810981098109"
          },
          "communicating": {
            "type": "boolean",
            "example": false
          },
          "desiredStartDate": {
            "type": "string",
            "format": "date"
          },
          "nextIndexReadingDate": {
            "type": "string",
            "format": "date"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "ticEnable": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "AvecTIC Activée"
          },
          "switchIndexBase": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "switchIndexLow": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "meterType": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "LINKY"
          },
          "meterNumber": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "388"
          },
          "prestationType": {
            "type": "string",
            "example": "CHF",
            "enum": [
              "MES",
              "CHF"
            ]
          },
          "ot": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "consumptionProfile": {
            "type": "string",
            "example": "ENT1",
            "enum": [
              "P011",
              "P012",
              "P013",
              "P014",
              "P015",
              "P016",
              "P017",
              "P018",
              "P019",
              "RES1",
              "RES11",
              "RES2",
              "RES3",
              "RES4",
              "RES5",
              "PRO1",
              "PRO2",
              "PRO3",
              "PRO4",
              "PRO6",
              "PRO5",
              "RES1WE",
              "RES11WE",
              "RES2WE",
              "RES22WE",
              "PRO1WE",
              "PRO2WE",
              "PRO22WE",
              "ENT1",
              "ENT2",
              "ENT3",
              "ENT4",
              "ENT5",
              "ENT6",
              "ENT7"
            ]
          },
          "power": {
            "type": "number",
            "example": 10
          },
          "tariffTransport": {
            "type": "string",
            "example": "CU4",
            "enum": [
              "CU4",
              "MU4",
              "CU",
              "CU_ST",
              "CUST",
              "MU",
              "MUDT",
              "LU",
              "T1",
              "T2",
              "T3",
              "T4",
              "TF",
              "TB",
              "BTINFLUSC",
              "BTINFCUST",
              "BTINFMUDT",
              "BTINFLU",
              "BTINFCU4",
              "BTINFMU4",
              "BTSUPLU4",
              "BTSUPCU4",
              "MU_DT"
            ]
          },
          "distributionGridOperatorCode": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "GINKO"
          }
        },
        "description": "DTO avec les infos du pod à importer"
      },
      "CreateCustomerImportDataMsDTO": {
        "required": [
          "companyName",
          "siret"
        ],
        "type": "object",
        "properties": {
          "companyName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "raisonSociale"
          },
          "siret": {
            "pattern": "^\\d{9}(\\d{5})?$",
            "type": "string",
            "example": "12345678905551"
          },
          "apeCode": {
            "maxLength": 5,
            "minLength": 4,
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "8411Z"
          },
          "referent": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "Maurice REMIGIUS"
          },
          "emailReferent": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "toto@gmail.com"
          },
          "customerType": {
            "type": "string",
            "enum": [
              "MS",
              "PUBLIC"
            ]
          }
        },
        "description": "DTO avec les infos du client à importer"
      },
      "CreateCustomersImportRequestMsDTO": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCustomerImportDataMsDTO"
            }
          }
        },
        "description": "DTO de requête pour créer des clients en masse"
      },
      "BankDetail": {
        "type": "object",
        "properties": {
          "iban": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM",
            "example": "FR3420041010150370605S03682"
          },
          "bic": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM",
            "example": "PSSTFRPPSTR"
          },
          "bankName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "description": "Obligatoire si paymentModeCode = DOM",
            "example": "LBP CENTRE DE STRASBOURG"
          }
        }
      },
      "BillingDataImportDto": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerDataImportDto"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDataImportDto"
          },
          "invoicing": {
            "$ref": "#/components/schemas/InvoicingDataImportDto"
          },
          "paymentInformation": {
            "$ref": "#/components/schemas/PaymentDataImportDto"
          }
        },
        "description": "DTO avec les infos de facturation du regroupement à importer"
      },
      "CreateContractImportDataMsDTO": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "billing": {
            "$ref": "#/components/schemas/BillingDataImportDto"
          },
          "offerCode": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "EKWRSD01"
          },
          "contractName": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "DRFIP PACAn"
          },
          "purchaseOrder": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "1404744091"
          },
          "customerId": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "DAE000001405"
          },
          "marketCode": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "2089.1102086759"
          },
          "costCenter": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "FAC0000000"
          },
          "serviceLabel": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "example": "Service facturier"
          }
        },
        "description": "DTO avec les infos du contrat à importer"
      },
      "CreateContractsImportRequestMs": {
        "type": "object",
        "properties": {
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateContractImportDataMsDTO"
            }
          }
        },
        "description": "DTO de requête pour créer des regroupements en masse"
      },
      "InvoicingDataImportDto": {
        "required": [
          "paymentDeadlineInDays",
          "sendingChannelCode"
        ],
        "type": "object",
        "properties": {
          "sendingChannelCode": {
            "type": "string",
            "example": "MAIL",
            "enum": [
              "MAIL",
              "PAPIER",
              "COURRIER",
              "SERENSIA",
              "CHORUS"
            ]
          },
          "invoiceFrequencyCode": {
            "type": "string",
            "example": "MENS",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "paymentDeadlineInDays": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "DTO avec les infos de payment du regroupement à importer"
      },
      "PaymentDataImportDto": {
        "required": [
          "paymentModeCode"
        ],
        "type": "object",
        "properties": {
          "paymentModeCode": {
            "type": "string",
            "example": "DOM",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankDetail"
          }
        },
        "description": "DTO avec les infos de payment du regroupement à importer"
      },
      "CreateMultisiteContractRequest": {
        "required": [
          "billConsolidationName"
        ],
        "type": "object",
        "properties": {
          "billConsolidationName": {
            "type": "string"
          },
          "marketNumber": {
            "type": "string"
          },
          "orderNumber": {
            "type": "string"
          },
          "costCenter": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "offerCode": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/CreateMultisiteContractRequestAddress"
          },
          "billingConfiguration": {
            "$ref": "#/components/schemas/CreateMultisiteContractRequestBillingConfiguration"
          },
          "bankDetails": {
            "$ref": "#/components/schemas/CreateMultisiteContractRequestBankDetails"
          },
          "contact": {
            "$ref": "#/components/schemas/CreateMultisiteContractRequestContact"
          }
        },
        "description": "Multisite contract request creation"
      },
      "CreateMultisiteContractRequestAddress": {
        "required": [
          "city",
          "roadName",
          "roadNumber",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "roadNumber": {
            "type": "string"
          },
          "roadName": {
            "type": "string"
          },
          "additionalAddress": {
            "type": "string"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "CreateMultisiteContractRequestBankDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "iban": {
            "type": "string"
          }
        }
      },
      "CreateMultisiteContractRequestBillingConfiguration": {
        "required": [
          "frequencyCode",
          "paymentDeadlineTimeline",
          "paymentMethodCode",
          "sendingChannelCode"
        ],
        "type": "object",
        "properties": {
          "frequencyCode": {
            "type": "string",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "sendingChannelCode": {
            "type": "string",
            "enum": [
              "MAIL",
              "PAPIER",
              "COURRIER",
              "SERENSIA",
              "CHORUS"
            ]
          },
          "paymentMethodCode": {
            "type": "string",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "paymentDeadlineTimeline": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateMultisiteContractRequestContact": {
        "required": [
          "civility",
          "firstname",
          "lastname"
        ],
        "type": "object",
        "properties": {
          "civility": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "landline": {
            "type": "string"
          },
          "mobilePhoneNumber": {
            "type": "string"
          }
        }
      },
      "CreateMultisiteContractResponse": {
        "type": "object",
        "properties": {
          "billConsolidationId": {
            "type": "string"
          }
        },
        "description": "Multisite contract response creation"
      },
      "CreateGroupeRequestMsDTO": {
        "required": [
          "consent",
          "dateSignature",
          "nom"
        ],
        "type": "object",
        "properties": {
          "nom": {
            "type": "string",
            "example": "CHANEL"
          },
          "dateSignature": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "mailContactSc": {
            "type": "string",
            "example": "dev@ekwateur.fr"
          },
          "customerAreaAdminAccount": {
            "type": "array",
            "example": [
              "dev@ekwateur.fr",
              "dev2@ekwateur.fr"
            ],
            "items": {
              "type": "string",
              "example": "[\"dev@ekwateur.fr\",\"dev2@ekwateur.fr\"]"
            }
          },
          "consent": {
            "type": "boolean",
            "example": true
          },
          "customerSupportTeamCode": {
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "description": "DTO pour créer le groupe"
      },
      "CreateGroupeResponseMsDTO": {
        "type": "object",
        "properties": {
          "refGroupe": {
            "type": "string",
            "example": "4083450c-ab8c-4556-a757-e93f612c8fe8"
          },
          "nom": {
            "type": "string",
            "example": "CHANEL"
          }
        },
        "description": "DTO pour retourner le groupe"
      },
      "GroupCustomerSearchRequest": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "siretSiren": {
            "type": "string"
          },
          "ape": {
            "type": "string"
          },
          "referent": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "GroupCustomerSearchResponse": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "siretSiren": {
            "type": "string"
          },
          "ape": {
            "type": "string"
          },
          "referent": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "PageGroupCustomerSearchResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupCustomerSearchResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          }
        }
      },
      "CreateCustomerRequestMsDTO": {
        "required": [
          "apeCode",
          "companyName",
          "group",
          "siret"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "example": "CHANEL"
          },
          "groupRef": {
            "type": "string",
            "example": "35a3469-367d-4322-83aa-4494ec145861"
          },
          "companyName": {
            "type": "string",
            "example": "GARAGE MILET"
          },
          "siret": {
            "type": "string",
            "example": "845221366"
          },
          "apeCode": {
            "maxLength": 5,
            "minLength": 4,
            "type": "string",
            "example": "6820B"
          },
          "referent": {
            "type": "string",
            "example": "Jean-Pierre BOURSERIE"
          },
          "emailReferent": {
            "type": "string",
            "example": "dev@ekwateur.fr"
          },
          "customerType": {
            "type": "string",
            "enum": [
              "MS",
              "PUBLIC"
            ]
          }
        },
        "description": "Requête pour créer un client multisite"
      },
      "CreateClientResponseMsDTO": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "CTR000000000"
          }
        },
        "description": "Réponse de la création du client multisite"
      },
      "CheckLegitimacyMsEcRequestDTO": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContractPodMsEcDTO"
            }
          }
        }
      },
      "CreateContractRequestMsDTO": {
        "required": [
          "civilite",
          "codeCanalEnvoi",
          "codeModePaiement",
          "codePostal",
          "codeRythmeFacturation",
          "commune",
          "delaiEcheance",
          "libelleVoie",
          "nom",
          "prenom",
          "referenceClient"
        ],
        "type": "object",
        "properties": {
          "nomBanque": {
            "type": "string"
          },
          "iban": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "numeroVoie": {
            "type": "string"
          },
          "libelleVoie": {
            "type": "string"
          },
          "complementVoie": {
            "type": "string"
          },
          "codePostal": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string"
          },
          "commune": {
            "type": "string"
          },
          "nomContrat": {
            "type": "string"
          },
          "referenceClient": {
            "type": "string"
          },
          "numeroMarche": {
            "type": "string"
          },
          "bonDeCommande": {
            "type": "string"
          },
          "centreCout": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "codeRythmeFacturation": {
            "type": "string",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "codeCanalEnvoi": {
            "type": "string",
            "enum": [
              "MAIL",
              "PAPIER",
              "COURRIER",
              "SERENSIA",
              "CHORUS"
            ]
          },
          "codeModePaiement": {
            "type": "string",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "delaiEcheance": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "civilite": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "nom": {
            "type": "string"
          },
          "prenom": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "telFixe": {
            "type": "string"
          },
          "telMobile": {
            "type": "string"
          },
          "codeOffre": {
            "type": "string"
          }
        }
      },
      "CreateContractResponseMsDTO": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          }
        }
      },
      "GetContractRequestMsDTO": {
        "required": [
          "referenceClient"
        ],
        "type": "object",
        "properties": {
          "referenceClient": {
            "type": "string"
          }
        }
      },
      "GetContractResponseMsDTO": {
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "bonDeCommande": {
            "type": "string"
          },
          "nomContrat": {
            "type": "string"
          }
        }
      },
      "ContractMsEcDTO": {
        "required": [
          "contractId"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          }
        }
      },
      "CustomerContractMsEcDTO": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractMsEcDTO"
            }
          }
        }
      },
      "GetContractRequestMsEcDTO": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "group": {
            "type": "string"
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContractMsEcDTO"
            }
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "AddressMsEcDTO": {
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "additionalAddress": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "ContactMsEcDTO": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          }
        }
      },
      "CustomerMsEcDTO": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "contractName": {
            "type": "string"
          },
          "costCenter": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "service": {
            "type": "string"
          }
        }
      },
      "GetContractMsEcDTO": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerMsEcDTO"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactMsEcDTO"
          },
          "address": {
            "$ref": "#/components/schemas/AddressMsEcDTO"
          }
        }
      },
      "GetContractResponseMsEcDTO": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetContractMsEcDTO"
            }
          }
        }
      },
      "AvailableStatusRequestMsDTO": {
        "required": [
          "podCode",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          }
        }
      },
      "AvailableStatusResponseMsDTO": {
        "type": "object",
        "properties": {
          "codeStatus": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ACCES_DIFFICILE",
                "PAS_DISPO",
                "NON_CONFIRME",
                "DEMANDE_ENVOYEE_GRD",
                "EN_ATTENTE_DELAIS_RETRACTATION",
                "A_BASCULER",
                "BASCULE_EN_ERREUR",
                "A_BASCULER_AVEC_DEPLACEMENT",
                "ENCOURS_DE_BASCULE",
                "A_BASCULER_MANUELLEMENT",
                "ACTIF",
                "EN_ATTENTE_DE_PRELEVEMENT",
                "EN_ATTENTE_DATE_SOUHAITEE",
                "EN_ATTENTE_DEPOT_GARANTIE",
                "EN_ATTENTE_INDEX",
                "EN_ATTENTE_RACCORDEMENT",
                "EN_ANALYSE_PREBASCULE",
                "EN_COURS_DE_RESILIATION",
                "RESILIATION_EN_ERREUR",
                "RESILIE_A_FACTURER",
                "RETRACTE",
                "ARCHIVE",
                "ARCHIVE_ERREUR_POD",
                "RESILIE"
              ]
            }
          }
        }
      },
      "CheckContractExistRequestDTO": {
        "type": "object",
        "properties": {
          "contractName": {
            "type": "string"
          },
          "purchaseOrder": {
            "type": "string"
          }
        }
      },
      "CheckContractExistResponseDTO": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "contractName": {
            "type": "string"
          },
          "purchaseOrder": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "socialReason": {
            "type": "string"
          }
        }
      },
      "GetClientRequestMsEcDTO": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "group": {
            "type": "string"
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerMsEcDTO"
            }
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "GetClientMsEcDTO": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "customerReference": {
            "type": "string"
          },
          "socialReason": {
            "type": "string"
          },
          "siretSiren": {
            "type": "string"
          },
          "ape": {
            "type": "string"
          },
          "referent": {
            "type": "string"
          },
          "referentMail": {
            "type": "string"
          }
        }
      },
      "GetClientResponseMsEcDTO": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetClientMsEcDTO"
            }
          }
        }
      },
      "GetClientByGroupeRequestMsDTO": {
        "required": [
          "refGroup"
        ],
        "type": "object",
        "properties": {
          "refGroup": {
            "type": "string"
          }
        }
      },
      "GetClientByGroupeResponseMsDTO": {
        "type": "object",
        "properties": {
          "referenceClient": {
            "type": "string"
          },
          "raisonSociale": {
            "type": "string"
          }
        }
      },
      "GetCustomerActionLogRequestDto": {
        "required": [
          "customerId"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "customerId": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          }
        }
      },
      "GetCustomerActionLogDto": {
        "type": "object",
        "properties": {
          "processName": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "oldValue": {
            "type": "string"
          },
          "newValue": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetCustomerActionLogResponseDto": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCustomerActionLogDto"
            }
          }
        }
      },
      "LevyInOneDayDTO": {
        "required": [
          "montantTTC",
          "refContrat"
        ],
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string"
          },
          "montantTTC": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SwitchIndexRequest": {
        "required": [
          "codePod",
          "indexBaseHP",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "indexBaseHP": {
            "type": "integer",
            "format": "int32"
          },
          "indexHC": {
            "type": "integer",
            "format": "int32"
          },
          "dateReleveBascule": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SwitchIndexResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusResponse"
          }
        }
      },
      "GoActivationDTO": {
        "required": [
          "contractReference",
          "etat"
        ],
        "type": "object",
        "properties": {
          "contractReference": {
            "type": "string"
          },
          "etat": {
            "type": "boolean"
          }
        },
        "description": "DTO Pour activer une contrat"
      },
      "HelpDeskGroupCustomFields": {
        "type": "object",
        "properties": {
          "routage_service_client": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HelpDeskGroupRequest": {
        "type": "object",
        "properties": {
          "custom_fields": {
            "$ref": "#/components/schemas/HelpDeskGroupCustomFields"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "health_score": {
            "type": "string"
          },
          "account_tier": {
            "type": "string"
          },
          "renewal_date": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "industry": {
            "type": "string"
          }
        }
      },
      "CustomerSearchByParamsRequest": {
        "required": [
          "acceptanceDateFrom",
          "acceptanceDateTo",
          "advantagesCodes",
          "billReference",
          "billingFrequency",
          "businessProvider",
          "contractId",
          "customerAttribute",
          "customerId",
          "delivery",
          "distributionSystemOperators",
          "email",
          "firstCommissioning",
          "firstname",
          "iban",
          "lastname",
          "municipality",
          "paymentMethod",
          "phone",
          "podStatusCode",
          "pointOfDelivery",
          "roadName",
          "segment",
          "sellingChannelCode",
          "sendingChannel",
          "seniorityFrom",
          "seniorityTo",
          "serviceCodes",
          "supplyStartDateFrom",
          "supplyStartDateTo",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "businessProvider": {
            "type": "array",
            "description": "apporteurs d'affaire",
            "example": [
              "UFC2019",
              "EKWATEUR"
            ],
            "items": {
              "type": "string",
              "description": "apporteurs d'affaire",
              "example": "[\"UFC2019\",\"EKWATEUR\"]"
            }
          },
          "segment": {
            "type": "string",
            "description": "Segment client",
            "example": "PART",
            "enum": [
              "PART",
              "PRO"
            ]
          },
          "seniorityFrom": {
            "type": "string",
            "description": "Date de création minimum du client",
            "format": "date",
            "example": "2020-12-25"
          },
          "seniorityTo": {
            "type": "string",
            "description": "Date de création maximum du client",
            "format": "date",
            "example": "2022-12-25"
          },
          "customerAttribute": {
            "type": "string",
            "description": "Caractéristiques du client",
            "example": "UFC 2019"
          },
          "serviceCodes": {
            "type": "array",
            "description": "Services",
            "example": [
              "AGO27",
              "VOLTALIS10"
            ],
            "items": {
              "type": "string",
              "description": "Services",
              "example": "[\"AGO27\",\"VOLTALIS10\"]"
            }
          },
          "advantagesCodes": {
            "type": "array",
            "description": "Codes avantages",
            "example": [
              "CULTURE_PRESSE",
              "IGRAAL"
            ],
            "items": {
              "type": "string",
              "description": "Codes avantages",
              "example": "[\"CULTURE_PRESSE\",\"IGRAAL\"]"
            }
          },
          "roadName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "nom de rue",
            "example": "place du Capitole"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Code postal",
            "example": "31000"
          },
          "municipality": {
            "type": "string",
            "description": "Ville",
            "example": "Toulouse"
          },
          "sendingChannel": {
            "type": "string",
            "description": "Canal d'envois",
            "example": "Email",
            "enum": [
              "MAIL",
              "PAPIER",
              "COURRIER",
              "SERENSIA",
              "CHORUS"
            ]
          },
          "paymentMethod": {
            "type": "string",
            "description": "Mode de paiement",
            "example": "CARTE BANCAIRE",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "billingFrequency": {
            "type": "string",
            "description": "Fréquence de facturation",
            "example": "MENS",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "podStatusCode": {
            "type": "array",
            "description": "Status du pod",
            "example": [
              70,
              90
            ],
            "items": {
              "type": "integer",
              "description": "Status du pod",
              "format": "int32"
            }
          },
          "delivery": {
            "type": "string",
            "description": "Prestation ou option de prestation",
            "example": "MES"
          },
          "firstCommissioning": {
            "type": "boolean",
            "description": "Premiere mise en service",
            "example": true
          },
          "distributionSystemOperators": {
            "type": "array",
            "description": "Distributeur",
            "example": [
              "GRDF",
              "GINKO"
            ],
            "items": {
              "type": "string",
              "description": "Distributeur",
              "example": "[\"GRDF\",\"GINKO\"]"
            }
          },
          "acceptanceDateFrom": {
            "type": "string",
            "description": "Date d'acceptation minimum",
            "format": "date",
            "example": "2020-12-25"
          },
          "acceptanceDateTo": {
            "type": "string",
            "description": "Date d'acceptation maximum",
            "format": "date",
            "example": "2020-12-25"
          },
          "supplyStartDateFrom": {
            "type": "string",
            "description": "Date de démarrage minimum du contrat",
            "format": "date",
            "example": "2020-12-25"
          },
          "supplyStartDateTo": {
            "type": "string",
            "description": "Date de démarrage maximum du contrat",
            "format": "date",
            "example": "2020-12-25"
          },
          "firstname": {
            "type": "string",
            "description": "Prénom du client",
            "example": "Jean"
          },
          "lastname": {
            "type": "string",
            "description": "Nom du client",
            "example": "Dupont"
          },
          "email": {
            "type": "string",
            "description": "email du client",
            "example": "email@ekwateur.fr"
          },
          "phone": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^\\d{0,10}$",
            "type": "string",
            "description": "téléphone du client",
            "example": "0606060606"
          },
          "iban": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "description": "iban du client",
            "example": "FR0012345678912345678912345"
          },
          "customerId": {
            "type": "string",
            "description": "Référence Client",
            "example": "EKW123456789"
          },
          "contractId": {
            "type": "string",
            "description": "Référence Contrat",
            "example": "CTR123456789"
          },
          "pointOfDelivery": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Référence Pod",
            "example": "12345678901234"
          },
          "sellingChannelCode": {
            "type": "string",
            "description": "Code Canal de vente",
            "example": "EKKO"
          },
          "billReference": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "description": "Reference de facturation",
            "example": "FRE000000000"
          },
          "billReferenceBlank": {
            "type": "boolean"
          }
        },
        "description": "Critères de recherche"
      },
      "CustomerAddress": {
        "type": "object",
        "properties": {
          "pods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPod"
            }
          },
          "roadNumber": {
            "type": "string",
            "example": "79"
          },
          "roadName": {
            "type": "string",
            "example": "rue de Clichy"
          },
          "zipCode": {
            "type": "string",
            "example": "75009"
          },
          "municipality": {
            "type": "string",
            "example": "Paris"
          },
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          }
        }
      },
      "CustomerContact": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "example": "prénom"
          },
          "lastname": {
            "type": "string",
            "example": "nom"
          },
          "email": {
            "type": "string",
            "example": "mon@mail.fr"
          },
          "firstnameUseForbidden": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CustomerPod": {
        "type": "object",
        "properties": {
          "pointOfDelivery": {
            "type": "string",
            "example": "12345678901234"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 60
          },
          "statusName": {
            "type": "string",
            "example": "ACTIF"
          }
        }
      },
      "CustomerSearchByParamsResponse": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/CustomerContact"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddress"
            }
          },
          "customerId": {
            "type": "string",
            "example": "EKW000000000"
          },
          "segment": {
            "type": "string",
            "example": "PART",
            "enum": [
              "PART",
              "PRO"
            ]
          },
          "companyName": {
            "type": "string",
            "example": "raisonSociale"
          },
          "created": {
            "type": "string",
            "format": "date",
            "example": "2022-11-20"
          }
        }
      },
      "PageCustomerSearchByParamsResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSearchByParamsResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CreateCustomerDto": {
        "required": [
          "applicationSource",
          "customer"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerDto"
          },
          "address": {
            "$ref": "#/components/schemas/CustomerAddressDto"
          },
          "pods": {
            "$ref": "#/components/schemas/CustomerPodDto"
          },
          "housingProfile": {
            "$ref": "#/components/schemas/CustomerHousingProfileDto"
          },
          "applicationSource": {
            "type": "string"
          }
        }
      },
      "CustomerAddressDto": {
        "type": "object",
        "properties": {
          "addressReference": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "municipality": {
            "type": "string"
          },
          "additionalAddress": {
            "type": "string"
          },
          "floor": {
            "type": "integer",
            "format": "int32"
          },
          "staircase": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "flat": {
            "type": "string"
          }
        }
      },
      "CustomerDto": {
        "required": [
          "businessProvider",
          "email",
          "firstname"
        ],
        "type": "object",
        "properties": {
          "businessProvider": {
            "type": "string"
          },
          "accountCreationDate": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        }
      },
      "CustomerHousingProfileDto": {
        "type": "object",
        "properties": {
          "housingProfileReference": {
            "type": "string"
          },
          "housingType": {
            "type": "string"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          },
          "isInsulated": {
            "type": "string",
            "enum": [
              "OUI",
              "NON",
              "NE_SAIT_PAS"
            ]
          },
          "isOwner": {
            "type": "boolean"
          },
          "constructionYear": {
            "type": "string"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cookingHeatingType": {
            "type": "string"
          },
          "peopleNumber": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "connectedToGas": {
            "type": "boolean"
          },
          "declaredPower": {
            "type": "number",
            "format": "double"
          },
          "outside": {
            "type": "boolean"
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "elecProvider": {
            "type": "string"
          },
          "gasProvider": {
            "type": "string"
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentDto"
            }
          }
        }
      },
      "CustomerPodDto": {
        "type": "object",
        "properties": {
          "elecPod": {
            "type": "string"
          },
          "gasPod": {
            "type": "string"
          }
        }
      },
      "CreateCustomerResponseDto": {
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string"
          }
        }
      },
      "CreateCustomerHousingProfileRequestDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean"
          },
          "peopleNumber": {
            "type": "integer",
            "format": "int32"
          },
          "housingType": {
            "type": "string"
          },
          "area": {
            "type": "integer",
            "format": "int32"
          },
          "outside": {
            "type": "boolean"
          },
          "isInsulated": {
            "type": "string",
            "enum": [
              "OUI",
              "NON",
              "NE_SAIT_PAS"
            ]
          },
          "constructionYear": {
            "type": "string"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "elecProvider": {
            "type": "string"
          },
          "gasProvider": {
            "type": "string"
          },
          "declaredPower": {
            "type": "number",
            "format": "double"
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentDto"
            }
          }
        }
      },
      "CreateCustomerHousingProfileResponseDto": {
        "type": "object",
        "properties": {
          "housingProfileReference": {
            "type": "string"
          },
          "addressReference": {
            "type": "string"
          }
        }
      },
      "CreateCustomerNewsRequestDto": {
        "type": "object",
        "properties": {
          "newsLetter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News"
            }
          }
        }
      },
      "News": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "string",
            "format": "uuid"
          },
          "news": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "writer": {
            "type": "string"
          }
        }
      },
      "GetCustomerNewsResponseDto": {
        "type": "object",
        "properties": {
          "newsLetter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News"
            }
          }
        }
      },
      "CustomerGetLoyaltyPointRequestDto": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          }
        },
        "description": "DTO de pagination pour récupérer les jouls et transactions associées d'un client"
      },
      "CustomerGetLoyaltyPointResponseDto": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "loyaltyPoint": {
            "type": "integer",
            "format": "int32",
            "example": -25
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JoulTransactionDto"
            }
          }
        },
        "description": "DTO réponse de récupération des jouls et transactions associées d'un client"
      },
      "JoulTransactionDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2021-02-05"
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "commentary": {
            "type": "string",
            "example": "openPage-Parrainage"
          }
        },
        "description": "DTO réponse avec les transactions de jouls"
      },
      "UpdateCustomerConsentRequestDto": {
        "required": [
          "consentType",
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@ekwateur.fr"
          },
          "beginIp": {
            "type": "string",
            "example": "127.0.0.1"
          },
          "consentType": {
            "type": "string",
            "enum": [
              "NIGHTWATCH",
              "OFFRES_EKWATEUR",
              "COLLECTE_IDX",
              "COLLECTE_CDC",
              "P_MAX",
              "ENREGISTREMENT_CONSO"
            ]
          },
          "lastName": {
            "type": "string",
            "example": "Dupont"
          },
          "mobilePhone": {
            "type": "string",
            "example": "0606060606"
          },
          "podCode": {
            "type": "string",
            "example": "789719729198127"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          },
          "outsideEnergyContract": {
            "type": "boolean",
            "example": true,
            "default": false
          }
        },
        "description": "DTO requête pour mettre à jour un consentement"
      },
      "AssignTeamNumberRequestDTO": {
        "required": [
          "chanel",
          "chanelContact"
        ],
        "type": "object",
        "properties": {
          "chanel": {
            "type": "string"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "75009"
          },
          "freshdeskId": {
            "type": "integer",
            "format": "int64",
            "example": 16030992262
          },
          "chanelContact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChanelContactDTO"
            }
          },
          "disableContactSave": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "DTO request pour retourner et/ou attribuer un numéro d'équipe en fonction des contacts en entrée"
      },
      "ChanelContactDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "MAIL",
              "TELEPHONE"
            ]
          },
          "value": {
            "type": "string",
            "example": "test@gmail.com"
          }
        },
        "description": "DTO pour les contacts"
      },
      "AssignTeamNumberResponseDTO": {
        "required": [
          "chanelContact"
        ],
        "type": "object",
        "properties": {
          "teamNumber": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "chanel": {
            "type": "string",
            "example": "CTI"
          },
          "chanelContact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChanelContactDTO"
            }
          }
        },
        "description": "DTO réponse avec le numéro d'équipe de la personne donnée en entrée, et les contacts enregistrés"
      },
      "CreateCustomerPodRequestDto": {
        "required": [
          "pods"
        ],
        "type": "object",
        "properties": {
          "housingProfileReference": {
            "type": "string"
          },
          "pods": {
            "$ref": "#/components/schemas/CustomerPodDto"
          }
        }
      },
      "CreateCustomerPodResponseDto": {
        "type": "object",
        "properties": {
          "elecPod": {
            "type": "string"
          },
          "gasPod": {
            "type": "string"
          }
        }
      },
      "DetectCustomerRequestDto": {
        "required": [
          "businessProviderCode",
          "email",
          "inseeCode",
          "lastName",
          "paymentModeCode",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "pdl": {
            "type": "string",
            "example": "07181186672308"
          },
          "pce": {
            "type": "string",
            "example": "21181126612389"
          },
          "email": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          },
          "paymentModeCode": {
            "type": "string",
            "enum": [
              "DOM",
              "CB",
              "COMPTE",
              "VIR",
              "DOMCB"
            ]
          },
          "businessProviderCode": {
            "type": "string"
          },
          "smallProducer": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "DTO request pour detect client"
      },
      "BillingDto": {
        "type": "object",
        "properties": {
          "invoiceFrequencyCode": {
            "type": "string",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "paymentModeToUpdate": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "DTO avec les infos de paiement"
      },
      "ChangeOfferDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "EKW000000000"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractDto"
            }
          }
        },
        "description": "DTO pour un changement d'offre"
      },
      "ContractDto": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDto"
          },
          "pods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PodDto"
            }
          },
          "billing": {
            "$ref": "#/components/schemas/BillingDto"
          }
        },
        "description": "DTO avec les infos d'un contrat"
      },
      "DetectCustomerResponseDto": {
        "type": "object",
        "properties": {
          "changeOffer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeOfferDto"
            }
          },
          "newContract": {
            "$ref": "#/components/schemas/NewContractDto"
          }
        },
        "description": "DTO réponse pour detectCustomer"
      },
      "NewContractDto": {
        "type": "object",
        "properties": {
          "offer": {
            "$ref": "#/components/schemas/OfferDto"
          }
        },
        "description": "DTO avec les infos de l'offre d'un nouveau contrat"
      },
      "OfferDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "UFCRESSE21"
          },
          "productGas": {
            "type": "string",
            "example": "GPFA005UA1"
          },
          "productElec": {
            "type": "string",
            "example": "null"
          }
        },
        "description": "DTO avec les infos d'une offre"
      },
      "PodDto": {
        "type": "object",
        "properties": {
          "podCode": {
            "type": "string",
            "example": "23303473189045"
          },
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          }
        },
        "description": "DTO avec les infos d'un pod"
      },
      "CreateCustomerAddressRequestDto": {
        "required": [
          "address",
          "customerReference"
        ],
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/CreateCustomerAdressDto"
          }
        }
      },
      "CreateCustomerAdressDto": {
        "required": [
          "municipality",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "additionalAddress": {
            "type": "string"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string"
          },
          "municipality": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "staircase": {
            "type": "string"
          },
          "floor": {
            "type": "integer",
            "format": "int32"
          },
          "flat": {
            "type": "string"
          }
        }
      },
      "CreateCustomerAddressResponseDto": {
        "type": "object",
        "properties": {
          "housingProfileReference": {
            "type": "string"
          },
          "addressReference": {
            "type": "string"
          }
        }
      },
      "ChangePriceTypeFromVariableToFixeRequest": {
        "required": [
          "energy",
          "tariffType"
        ],
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "example": "ELECTRICITY",
            "enum": [
              "GAS",
              "ELECTRICITY"
            ]
          },
          "tariffType": {
            "type": "string",
            "example": "FIXE",
            "enum": [
              "FIXE",
              "VARIABLE"
            ]
          }
        }
      },
      "ChangePriceTypeFromVariableToFixeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "codeGrille": {
            "type": "string"
          },
          "codeTarif": {
            "type": "string"
          },
          "prixAboTtc": {
            "type": "number",
            "format": "double"
          },
          "prixConsoTtc": {
            "type": "number",
            "format": "double"
          },
          "prixConsoHcTtc": {
            "type": "number",
            "format": "double"
          },
          "dateRenouvellement": {
            "type": "string",
            "format": "date-time"
          },
          "dateDebut": {
            "type": "string",
            "format": "date-time"
          },
          "dateFin": {
            "type": "string",
            "format": "date-time"
          },
          "idContratFourniture": {
            "type": "integer",
            "format": "int32"
          },
          "idOffre": {
            "type": "integer",
            "format": "int32"
          },
          "duree": {
            "type": "integer",
            "format": "int32"
          },
          "renewedToDuplicate": {
            "type": "boolean"
          }
        }
      },
      "TariffGridResponse": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "GRI000000002"
          },
          "url": {
            "type": "string",
            "example": "https://aws-url/GRI000000002.pdf"
          }
        },
        "description": "Réponse avec le lien S3 et la reference de la grille tarifaire"
      },
      "AvailableOffersRequest": {
        "required": [
          "businessProvider",
          "pod",
          "segment",
          "sellingChannel"
        ],
        "type": "object",
        "properties": {
          "segment": {
            "type": "string",
            "example": "PART",
            "enum": [
              "PART",
              "PRO"
            ]
          },
          "pod": {
            "$ref": "#/components/schemas/Pod"
          },
          "sellingChannel": {
            "type": "string",
            "example": "APP",
            "enum": [
              "AO",
              "EKKO",
              "AEBO",
              "PSFO",
              "PSBO",
              "AEFO",
              "EC",
              "APP"
            ]
          },
          "businessProvider": {
            "type": "string",
            "example": "EKW"
          }
        },
        "description": "Requête de base pour obtenir un devis d'ajout énergie"
      },
      "Dial": {
        "required": [
          "annualConsumptionReference",
          "temporalClass"
        ],
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string",
            "example": "BASE",
            "enum": [
              "BASE",
              "HP",
              "HC",
              "HPH",
              "HCH",
              "HPB",
              "HCB"
            ]
          },
          "annualConsumptionReference": {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "example": 1000
          }
        },
        "description": "Informations de cadrant de compteur, incluant classe temporelle et CAR"
      },
      "Pod": {
        "required": [
          "energy"
        ],
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "code": {
            "type": "string",
            "example": "07169464532304"
          },
          "power": {
            "type": "number",
            "format": "double",
            "example": 6.0
          },
          "tariffOption": {
            "type": "string",
            "example": "1",
            "enum": [
              "0",
              "1",
              "2",
              "4"
            ]
          },
          "dials": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dial"
            }
          }
        },
        "description": "Un pod plus ou moins complet selon l'énergie à ajouter"
      },
      "AnnualPrices": {
        "type": "object",
        "properties": {
          "exclTaxes": {
            "type": "number",
            "example": 100
          },
          "inclTaxes": {
            "type": "number",
            "example": 120
          }
        }
      },
      "AvailableOffer": {
        "type": "object",
        "properties": {
          "offer": {
            "$ref": "#/components/schemas/Offer"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "description": "Une offre disponible pour l'énergie à ajouter"
      },
      "AvailableOffersResponse": {
        "type": "object",
        "properties": {
          "warning": {
            "type": "string",
            "example": "ESTIMATED_PRICE",
            "enum": [
              "DEFAULT_PRICE",
              "DEFAULT_PRICE_DESPITE_POD",
              "INPUT_DATA_ESTIMATED_PRICE",
              "DGO_DATA_ESTIMATED_PRICE"
            ]
          },
          "availableOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableOffer"
            }
          },
          "currentOffer": {
            "$ref": "#/components/schemas/CurrentOffer"
          }
        },
        "description": "Réponse de base pour obtenir un devis d'ajout énergie"
      },
      "CurrentOffer": {
        "type": "object",
        "properties": {
          "offerCode": {
            "type": "string",
            "example": "EKWRESSE01"
          },
          "productCode": {
            "type": "string",
            "example": "EPFA100001"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "consumptionPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionPrices"
            }
          },
          "subscriptionPrices": {
            "$ref": "#/components/schemas/SubscriptionPrices"
          },
          "annualPrices": {
            "$ref": "#/components/schemas/AnnualPrices"
          }
        },
        "description": "L'offre courante de l'énergie actuelle"
      },
      "Offer": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EKWRESSD01"
          },
          "name": {
            "type": "string",
            "example": "Electricité 100% renouvelable et Gaz Naturel"
          },
          "description": {
            "type": "string",
            "example": "Electricité 100% renouvelable et Gaz Naturel"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "segment": {
            "type": "string",
            "example": "PART",
            "enum": [
              "PART",
              "PRO"
            ]
          }
        },
        "description": "Une offre pour l'énergie à ajouter"
      },
      "Product": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EPFA100001"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "consumptionPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionPrices"
            }
          },
          "subscriptionPrices": {
            "$ref": "#/components/schemas/SubscriptionPrices"
          },
          "annualPrices": {
            "$ref": "#/components/schemas/AnnualPrices"
          }
        },
        "description": "Un produit disponible pour l'énergie à ajouter"
      },
      "Service": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AGO18"
          },
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "unitPrices": {
            "$ref": "#/components/schemas/UnitPrices"
          },
          "annualPrices": {
            "$ref": "#/components/schemas/AnnualPrices"
          }
        },
        "description": "Un service disponible pour l'énergie à ajouter"
      },
      "SubscriptionPrices": {
        "type": "object",
        "properties": {
          "exclTaxes": {
            "type": "number",
            "example": 0.12
          },
          "inclTaxes": {
            "type": "number",
            "example": 0.14
          }
        }
      },
      "UnitPrices": {
        "type": "object",
        "properties": {
          "exclTaxes": {
            "type": "number",
            "example": 0.00499
          },
          "inclTaxes": {
            "type": "number",
            "example": 0.01
          }
        },
        "description": "The representation of Unit prices"
      },
      "DocumentVersionAndReference": {
        "required": [
          "reference"
        ],
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "CTR0000000"
          },
          "version": {
            "type": "string",
            "example": "7878DHDJID78"
          }
        },
        "description": "Dto avec la version et la référence d'un document"
      },
      "SendPrintDocumentRequest": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentVersionAndReference"
            }
          }
        },
        "description": "DTO avec la liste des références documents et version à imprimer"
      },
      "SendDocumentEmailsRequest": {
        "required": [
          "emails"
        ],
        "type": "object",
        "properties": {
          "documents": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentVersionAndReference"
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Dto request pour envoyer 1 à 3 documents par emails à au moins un destinataire"
      },
      "DialDetails": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "hasResetFromZero": {
            "type": "boolean"
          }
        }
      },
      "PodTerminationRequestRequest": {
        "type": "object",
        "properties": {
          "requestedDate": {
            "type": "string",
            "format": "date"
          },
          "comment": {
            "type": "string"
          },
          "dials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialDetails"
            }
          },
          "groupName": {
            "type": "string"
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "technicalMessage": {
            "type": "string"
          },
          "publicMessage": {
            "type": "string"
          }
        }
      },
      "PodTerminationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "hasTerminationRequest": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetails"
            }
          }
        }
      },
      "MonthlyVariablePriceGridAddress": {
        "type": "object",
        "properties": {
          "roadNumber": {
            "type": "string"
          },
          "roadName": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "MonthlyVariablePriceGridBillingEstimation": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string"
          },
          "energyType": {
            "type": "string",
            "enum": [
              "GAS",
              "ELECTRICITY",
              "DUAL",
              "NO_ENERGY",
              "WOOD"
            ]
          },
          "power": {
            "type": "integer",
            "format": "int32"
          },
          "tariffOption": {
            "type": "integer",
            "format": "int32"
          },
          "gridDate": {
            "type": "string",
            "format": "date"
          },
          "consumptionBasePriceExclTaxes": {
            "type": "number"
          },
          "consumptionBasePriceInclTaxes": {
            "type": "number"
          },
          "consumptionLowPriceExclTaxes": {
            "type": "number"
          },
          "consumptionLowPriceInclTaxes": {
            "type": "number"
          },
          "cta": {
            "type": "number"
          },
          "subscriptionPriceExclTaxes": {
            "type": "number"
          },
          "subscriptionPriceInclTaxes": {
            "type": "number"
          },
          "cspePrice": {
            "type": "number"
          },
          "tcfePrice": {
            "type": "number"
          },
          "ticgnPrice": {
            "type": "number"
          }
        }
      },
      "MonthlyVariablePriceGridContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          }
        }
      },
      "MonthlyVariablePriceGridEvent": {
        "required": [
          "address",
          "contacts",
          "contractId",
          "customerId",
          "date",
          "gridDate",
          "offerName",
          "supplyStartDate",
          "tariffPartEstimateOutputs",
          "templateName"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyVariablePriceGridContact"
            }
          },
          "address": {
            "$ref": "#/components/schemas/MonthlyVariablePriceGridAddress"
          },
          "customerId": {
            "type": "string"
          },
          "templateName": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "offerName": {
            "type": "string"
          },
          "documentState": {
            "type": "string"
          },
          "gridDate": {
            "type": "string",
            "format": "date"
          },
          "supplyStartDate": {
            "type": "string",
            "format": "date"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "tariffPartEstimateOutputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyVariablePriceGridBillingEstimation"
            }
          }
        }
      },
      "LastContactsRequest": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2021-05-09"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2021-06-10"
          }
        },
        "description": "DTO pour rechercher les sms, email et tickets freshdesk d'un client"
      },
      "ContactExterne": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "CTR000000000"
          },
          "url": {
            "type": "string",
            "example": "https://ekwateurjoulcie.freshdesk.com/a/tickets/2268040"
          },
          "type": {
            "type": "string",
            "example": "PROACTIF"
          },
          "process": {
            "type": "string",
            "example": "INCIDENT"
          },
          "childProcess": {
            "type": "string",
            "example": "Ekko"
          },
          "action": {
            "type": "string",
            "example": "GO Activation"
          },
          "energy": {
            "type": "string",
            "example": "Electricité"
          },
          "status": {
            "type": "string",
            "example": "Clôturé"
          },
          "created": {
            "type": "string",
            "format": "date"
          },
          "deadline": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "DTO avec les infos des sms, email et tickets freshdesk d'un client"
      },
      "LastContactsResponse": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "example": "Les mails et SMS associés au client sont actuellement indisponibles."
          },
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactExterne"
            }
          }
        },
        "description": "DTO réponse de recherche des sms, email et tickets freshdesk d'un client"
      },
      "InvoiceFrequencyRequestDto": {
        "required": [
          "invoiceFrequencyCode"
        ],
        "type": "object",
        "properties": {
          "invoiceFrequencyCode": {
            "type": "string",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "electricityMonthlyFee": {
            "type": "integer",
            "description": "Obligatoire si invoiceFrequencyCode=ANN & il y a un PDL sur le CTR avec fk_code_statut=60",
            "format": "int32"
          },
          "gasMonthlyFee": {
            "type": "integer",
            "description": "Obligatoire si invoiceFrequencyCode=ANN & il y a un PCE sur le CTR avec fk_code_statut=60",
            "format": "int32"
          },
          "templateStartDate": {
            "type": "string",
            "description": "Date de début de l'échéancier. Obligatoire si invoiceFrequencyCode=ANN ",
            "format": "date",
            "example": "2022-11-21"
          }
        },
        "description": "DTO d'entrée pour mettre à jour le rythme de facturation"
      },
      "DocumentsRequest": {
        "required": [
          "familyName"
        ],
        "type": "object",
        "properties": {
          "familyName": {
            "type": "string",
            "enum": [
              "BILL",
              "TEMPLATE",
              "CONTRACT_AND_MANDATE",
              "OTHER"
            ]
          },
          "paging": {
            "$ref": "#/components/schemas/PaginationRequest"
          }
        },
        "description": "DTO request pour retourner les documents d'un contrat"
      },
      "Documents": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "ECH000001245"
          },
          "status": {
            "type": "string",
            "example": "F"
          },
          "s3Version": {
            "type": "string",
            "example": "89jk.jkdkjskjdsjk776"
          },
          "version": {
            "type": "string",
            "example": "2"
          },
          "date": {
            "type": "string",
            "description": "2021-05-01",
            "format": "date"
          },
          "name": {
            "type": "string",
            "example": "Echéancier"
          },
          "amountIncludedTaxes": {
            "type": "number",
            "description": "Retourner seulement pour les documents de type facture",
            "format": "float",
            "example": 770
          }
        },
        "description": "DTO pour les infos d'un document"
      },
      "DocumentsResponse": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Documents"
            }
          }
        },
        "description": "DTO reponse qui retourne les documents d'un contrat"
      },
      "ContractGlobalInfosRequest": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "pod": {
            "type": "string"
          },
          "contractNumber": {
            "type": "string"
          }
        }
      },
      "ContractGlobalInfosPeriod": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "gridCode": {
            "type": "string"
          },
          "tariffCode": {
            "type": "string"
          },
          "tariffType": {
            "type": "string"
          }
        }
      },
      "ContractGlobalInfosResponse": {
        "type": "object",
        "properties": {
          "supplyContractStartDate": {
            "type": "string",
            "format": "date"
          },
          "supplyContractEndDate": {
            "type": "string",
            "format": "date"
          },
          "contractNumber": {
            "type": "string"
          },
          "podCode": {
            "type": "string"
          },
          "podEnergy": {
            "type": "string"
          },
          "dgoName": {
            "type": "string"
          },
          "activeOfferCode": {
            "type": "string"
          },
          "activeOfferEnergy": {
            "type": "string"
          },
          "customerSegment": {
            "type": "string"
          },
          "supplyContractSegment": {
            "type": "string"
          },
          "consumptionClass": {
            "type": "string"
          },
          "priceZone": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "zipCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          },
          "VatConstructionYear": {
            "type": "integer",
            "format": "int32"
          },
          "tariffPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractGlobalInfosPeriod"
            }
          },
          "contractServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractGlobalInfosService"
            }
          },
          "supplyContractServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractGlobalInfosService"
            }
          },
          "taxExonerations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractGlobalInfosTaxExoneration"
            }
          }
        }
      },
      "ContractGlobalInfosService": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "serviceEnergy": {
            "type": "string"
          },
          "serviceCode": {
            "type": "string"
          },
          "tariffCode": {
            "type": "number",
            "format": "double"
          },
          "gridCode": {
            "type": "string"
          }
        }
      },
      "ContractGlobalInfosTaxExoneration": {
        "type": "object",
        "properties": {
          "typeExoneration": {
            "type": "string"
          },
          "valeur": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JsonNode": {
        "type": "object"
      },
      "RegulatoryStatementRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "PRICE_SHIELD_2023_PRO",
            "enum": [
              "PRICE_SHIELD_2023_PRO",
              "PRICE_SHIELD_2023_COLLECTIVITY"
            ]
          },
          "statementTypeVersion": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "customerRefusal": {
            "type": "boolean",
            "example": false
          },
          "data": {
            "type": "object",
            "format": "JSonNode"
          }
        },
        "description": "Request create regulatory statement"
      },
      "CaseTrackingRequestDto": {
        "required": [
          "desiredEffectDate",
          "podCode",
          "prestationType",
          "status"
        ],
        "type": "object",
        "properties": {
          "podCode": {
            "type": "string",
            "example": "23303473189045"
          },
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          },
          "prestationType": {
            "type": "string",
            "example": "RESILIATION",
            "enum": [
              "ACTIVATION",
              "RELEVE",
              "RESILIATION",
              "FRAIS",
              "CORRECTION_RELEVE",
              "ANNULATION_RELEVE",
              "CHANGEMENT_COMPTEUR",
              "CHANGEMENT_TARIF",
              "CHANGEMENT_CAR",
              "CHANGEMENT_RE",
              "MODIFICATION_DONNEES_ADMIN",
              "MODIFICATION_CONTRACTUELLE",
              "SUIVI_AFFAIRE",
              "INDETERMINE",
              "AUTO_RELEVE",
              "MIGRATION",
              "MIGRATION_EFFECTIVE",
              "MIGRATION_AUTO_PRODUCTEUR",
              "FRAIS_ACHEMINEMENT",
              "FRAIS_JAUNES",
              "FRAIS_ACHEMINEMENT_JAUNES",
              "GET_INFOS",
              "UPDATE_DTR",
              "VERIF_PARC",
              "RLV_INTERVENTION_IMPAYE",
              "EC_ACTIV",
              "EC_RESIL",
              "ACTIV_SERVICES",
              "ARRET_SERVICES",
              "OPPOSITION_CDC",
              "RECHERCHE_SERVICES",
              "RELEVE_QUOTIDIENNE"
            ]
          },
          "caseTrackingId": {
            "type": "string",
            "example": "1"
          },
          "terminationReason": {
            "type": "string",
            "example": "null"
          },
          "status": {
            "type": "string",
            "example": "ANNULE",
            "enum": [
              "CREE",
              "EN_COURS",
              "EN_ATTENTE",
              "EN_ERREUR",
              "TERMINE",
              "ANNULE",
              "NEUTRALISE",
              "NON_IMPLEMENTE",
              "NON_APPLICABLE",
              "EN_ATTENTE_R04"
            ]
          },
          "desiredEffectDate": {
            "type": "string",
            "format": "date",
            "example": "2021-02-02"
          }
        },
        "description": "DTO pour le suivi d'affaire"
      },
      "AuthenticationRequest": {
        "type": "object",
        "properties": {
          "ekwCustomer": {
            "type": "string"
          }
        }
      },
      "JwtUrl": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "PasswordRecoveryRequest": {
        "type": "object",
        "properties": {
          "mail": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          }
        }
      },
      "ValidationTokenRequest": {
        "required": [
          "customerId",
          "token"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "CreateArchiveRequestDTO": {
        "required": [
          "codePod",
          "contractReference",
          "status"
        ],
        "type": "object",
        "properties": {
          "contractReference": {
            "type": "string"
          },
          "codePod": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACCES_DIFFICILE",
              "PAS_DISPO",
              "NON_CONFIRME",
              "DEMANDE_ENVOYEE_GRD",
              "EN_ATTENTE_DELAIS_RETRACTATION",
              "A_BASCULER",
              "BASCULE_EN_ERREUR",
              "A_BASCULER_AVEC_DEPLACEMENT",
              "ENCOURS_DE_BASCULE",
              "A_BASCULER_MANUELLEMENT",
              "ACTIF",
              "EN_ATTENTE_DE_PRELEVEMENT",
              "EN_ATTENTE_DATE_SOUHAITEE",
              "EN_ATTENTE_DEPOT_GARANTIE",
              "EN_ATTENTE_INDEX",
              "EN_ATTENTE_RACCORDEMENT",
              "EN_ANALYSE_PREBASCULE",
              "EN_COURS_DE_RESILIATION",
              "RESILIATION_EN_ERREUR",
              "RESILIE_A_FACTURER",
              "RETRACTE",
              "ARCHIVE",
              "ARCHIVE_ERREUR_POD",
              "RESILIE"
            ]
          }
        },
        "description": "DTO pour archiver un pod"
      },
      "ArchiveResponseDTO": {
        "type": "object",
        "properties": {
          "refContrat": {
            "type": "string",
            "example": "CTR000000000"
          },
          "codeResponseEC": {
            "type": "integer",
            "format": "int32",
            "example": 200
          }
        },
        "description": "DTO réponse d'archivage d'un pod"
      },
      "CreateCustomerAdvantageDTO": {
        "required": [
          "codeAvantage",
          "referenceContrat"
        ],
        "type": "object",
        "properties": {
          "referenceContrat": {
            "type": "string",
            "example": "CTR000000000"
          },
          "codeAvantage": {
            "type": "string",
            "example": "CULTURE_PRESSE"
          },
          "codeUnique": {
            "type": "string",
            "example": "2156456"
          },
          "libelle": {
            "type": "string",
            "example": "Un label"
          }
        },
        "description": "Requête pour ajouter un avantage"
      },
      "ActivationRequestDTO": {
        "required": [
          "car",
          "index",
          "noSendFreshDesk",
          "podCode",
          "profile",
          "startDate",
          "tariffOption",
          "tariffTransport"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          },
          "podCode": {
            "type": "string",
            "example": "23303473189045"
          },
          "startDate": {
            "type": "string",
            "description": "La date de début ne peut être dans le futur",
            "format": "date",
            "example": "2021-02-02"
          },
          "nextReadingDate": {
            "type": "string",
            "format": "date",
            "example": "2021-02-02"
          },
          "index": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexDetail"
            }
          },
          "pcs": {
            "type": "number",
            "format": "double",
            "example": 2.5
          },
          "tariffOption": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "tariffTransport": {
            "type": "string",
            "example": "MUDT"
          },
          "subscriptionPower": {
            "type": "number",
            "description": "Si option tarifaire == 1, 2 ou 4 alors une valeur est attendue.",
            "format": "double",
            "example": 10.3
          },
          "car": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CadranActivationDTO"
            }
          },
          "profile": {
            "type": "string"
          },
          "dgoName": {
            "type": "string",
            "example": "2.5"
          },
          "inseeCode": {
            "type": "string",
            "example": "31555"
          },
          "meterCode": {
            "type": "string",
            "example": "111"
          },
          "meterType": {
            "type": "string",
            "example": "GAZ"
          },
          "communicating": {
            "type": "boolean",
            "example": true
          },
          "noSendFreshDesk": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "DTO pour activer un pod"
      },
      "CadranActivationDTO": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string",
            "description": "Si option tarifaire == 1 alors BASE, si option tarifaire == 2 alors HP et HC, et si option tarifaire == 4 alors HPH, HCH, HPB, et HCB attendu.",
            "example": "BASE"
          },
          "car": {
            "type": "integer",
            "format": "int32",
            "example": 2000
          }
        },
        "description": "DTO pour les cadrans"
      },
      "IndexDetail": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string",
            "description": "Si option tarifaire == 1 alors BASE, si option tarifaire == 2 alors HP et HC, et si option tarifaire == 4 alors HPH, HCH, HPB, et HCB attendu.",
            "example": "BASE"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "example": 1234
          }
        },
        "description": "Détail des indexs"
      },
      "PatchDenominationFactureRequestDTO": {
        "required": [
          "contractRef"
        ],
        "type": "object",
        "properties": {
          "contractRef": {
            "type": "string"
          },
          "nameInvoice": {
            "type": "string"
          }
        }
      },
      "PatchCodeAnalytiqueRequestDTO": {
        "required": [
          "contractRef"
        ],
        "type": "object",
        "properties": {
          "contractRef": {
            "type": "string"
          },
          "analyticCode": {
            "type": "string"
          }
        }
      },
      "CookingDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "description": "DTO avec les infos des aménagements de la cuisine"
      },
      "CustomerEquipmentV2Dto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "origin": {
            "type": "string"
          },
          "seniority": {
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "description": "DTO de réponse avec les infos des équipements d'une maison"
      },
      "HouseHeatingTypeDto": {
        "required": [
          "energy"
        ],
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "example": "ELEC"
          },
          "radiator": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "thermostat": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "programmer": {
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "DTO pour les infos du chauffage de la maison"
      },
      "PatchUpdateCustomerHousingProfileDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean",
            "example": true
          },
          "peopleNumber": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "housingType": {
            "type": "string",
            "example": "APPARTEMENT"
          },
          "area": {
            "type": "integer",
            "format": "int32",
            "example": 110
          },
          "outside": {
            "type": "boolean",
            "example": true
          },
          "isInsulated": {
            "type": "string",
            "enum": [
              "OUI",
              "NON",
              "NE_SAIT_PAS"
            ]
          },
          "constructionYear": {
            "type": "string",
            "example": "NEUF"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HouseHeatingTypeDto"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaterHeatingTypeDto"
            }
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 12
          },
          "elecProvider": {
            "type": "string",
            "example": "EKWATEUR"
          },
          "gasProvider": {
            "type": "string",
            "example": "EKWATEUR"
          },
          "declaredPower": {
            "type": "number",
            "format": "double",
            "example": 400
          },
          "connectedToGas": {
            "type": "boolean",
            "example": true
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentV2Dto"
            }
          },
          "balconyTerrace": {
            "type": "boolean",
            "example": true
          },
          "courtyard": {
            "type": "boolean",
            "example": true
          },
          "photovoltaic": {
            "type": "boolean",
            "example": false
          },
          "waterUsage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaterUsageDto"
            }
          },
          "waterMode": {
            "type": "string",
            "enum": [
              "INDIVIDUEL",
              "COLLECTIF"
            ]
          },
          "houseHeatingMode": {
            "type": "string",
            "enum": [
              "INDIVIDUEL",
              "COLLECTIF"
            ]
          },
          "cooking": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CookingDto"
            }
          },
          "mainLighting": {
            "type": "string",
            "example": "ECO"
          },
          "outsideArea": {
            "type": "integer",
            "format": "int32",
            "example": 12
          },
          "residence": {
            "type": "string",
            "enum": [
              "PRINCIPALE",
              "SECONDAIRE",
              "ETUDIANTS",
              "INOCCUPEE"
            ]
          },
          "position": {
            "type": "string",
            "example": "1COTE"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "rooms": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "pool": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "DTO de patch pour le lieu de consommation"
      },
      "WaterHeatingTypeDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "waterHeater": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "thermostat": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "programmer": {
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "DTO pour les infos du chauffage de l'eau"
      },
      "WaterUsageDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "DOUCHE"
          }
        },
        "description": "DTO avec les infos d'usage de l'eau"
      },
      "TeamNumberByPhoneResponseDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "REJECTED",
              "IS_CUSTOMER",
              "IS_CUSTOMER_WITH_TERMINATION",
              "IS_PROSPECT",
              "REGISTERED"
            ]
          },
          "message": {
            "type": "string",
            "example": "Masked number"
          },
          "teamNumber": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "isEld": {
            "type": "boolean",
            "example": false
          },
          "hasOverdueBalance": {
            "type": "boolean",
            "example": false
          },
          "isUfc": {
            "type": "boolean",
            "example": true
          }
        },
        "description": "DTO réponse pour le type de client et ses infos"
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "CHANEL"
          },
          "reference": {
            "type": "string",
            "example": "4083450c-ab8c-4556-a757-e93f612c8fe8"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupContactDetails"
            }
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupContractSignatureDetails"
            }
          },
          "customerServiceEmail": {
            "type": "string",
            "example": "dev@ekwateur.fr"
          },
          "customerSupportTeamCode": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "helpdeskId": {
            "type": "integer",
            "format": "int64",
            "example": 1234567890
          }
        }
      },
      "MonthlyPricesPeriod": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2020-12-12"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2021-03-06"
          },
          "consumptionPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionPrices"
            }
          }
        },
        "description": "Détail d'une période de prix mensuelle d'une période tarifaire."
      },
      "MonthlyPricesPeriodsResponse": {
        "type": "object",
        "properties": {
          "monthlyPricesPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyPricesPeriod"
            }
          }
        },
        "description": "Périodes de prix mensuels d'une période tarifaire."
      },
      "SponsorDTO": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "totalSponsored": {
            "type": "integer",
            "format": "int32"
          },
          "photo": {
            "type": "string"
          }
        }
      },
      "SponsorshipLeaderboardResponseDto": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/SponsorDTO"
          },
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorDTO"
            }
          }
        }
      },
      "SponsoredDTO": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "contractStatus": {
            "type": "string"
          }
        }
      },
      "SponsoredResponseDTO": {
        "type": "object",
        "properties": {
          "retractSponsored": {
            "type": "integer",
            "format": "int32"
          },
          "activeSponsored": {
            "type": "integer",
            "format": "int32"
          },
          "pendingSponsored": {
            "type": "integer",
            "format": "int32"
          },
          "loyaltyPoint": {
            "type": "number"
          },
          "sponsored": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsoredDTO"
            }
          }
        }
      },
      "GetServiceResponseDTO": {
        "type": "object",
        "properties": {
          "serviceCode": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "subscriptionDate": {
            "type": "string",
            "format": "date"
          },
          "typeTarif": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "ResiliationUserResponseDTO": {
        "type": "object",
        "properties": {
          "nom": {
            "type": "string"
          },
          "prenom": {
            "type": "string"
          }
        }
      },
      "Balance": {
        "type": "object",
        "properties": {
          "initial": {
            "type": "number",
            "example": 60.0
          },
          "current": {
            "type": "number",
            "example": 20.0
          }
        },
        "description": "Soldes d'un moyen de paiement"
      },
      "PaymentMethodTransactionDetailsResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Balance"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetails"
            }
          }
        },
        "description": "Réponse détaillant les transactions d'un moyen de paiement donné"
      },
      "TransactionDetails": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "amount": {
            "type": "number",
            "example": 60.0
          },
          "invoiceReference": {
            "type": "string",
            "example": "MEN123456789"
          }
        },
        "description": "Détails des transactions d'un moyen de paiement"
      },
      "AvailablePaymentMethodResponse": {
        "type": "object",
        "properties": {
          "registeredRib": {
            "$ref": "#/components/schemas/BankDetail"
          },
          "availablePaymentModes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMode"
            }
          }
        }
      },
      "PaymentMode": {
        "type": "object",
        "properties": {
          "paymentModeCode": {
            "type": "string"
          },
          "paymentModeName": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "SitesEnCoursIntegrationGrdsResponseDTO": {
        "type": "object",
        "properties": {
          "siGrd": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OffreDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OffreGroupeResponseDTO": {
        "type": "object",
        "properties": {
          "groupReference": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffreDTO"
            }
          }
        }
      },
      "IntegrationReportData": {
        "type": "object",
        "properties": {
          "agent": {
            "type": "string",
            "example": "Céline Péron"
          },
          "groupName": {
            "type": "string",
            "example": "CHANNEL"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "importStatus": {
            "type": "string",
            "example": "COMPLETE",
            "enum": [
              "PROCESSING",
              "COMPLETE",
              "PARTIAL",
              "ERROR"
            ]
          },
          "importType": {
            "type": "string",
            "example": "CUSTOMERS",
            "enum": [
              "CUSTOMERS",
              "CONTRACTS",
              "SITES"
            ]
          },
          "totalToImport": {
            "type": "integer",
            "format": "int32",
            "example": 200
          },
          "totalImported": {
            "type": "integer",
            "format": "int32",
            "example": 122
          },
          "ref": {
            "type": "string",
            "example": "122"
          }
        },
        "description": "Dto réponse avec les infos du rapport d'intégration MS"
      },
      "IntegrationReportResponse": {
        "type": "object",
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationReportData"
            }
          }
        },
        "description": "Dto réponse avec les infos du rapport d'intégration MS"
      },
      "GroupResponseDTO": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "4083450c-ab8c-4556-a757-e93f612c8fe8"
          },
          "name": {
            "type": "string",
            "example": "CHANEL"
          },
          "email": {
            "type": "string",
            "example": "dev@ekwateur.fr"
          },
          "created": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "signatureDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "consent": {
            "type": "boolean",
            "example": true
          },
          "phoneNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "example": "0101010101"
          }
        },
        "description": "DTO pour retourner toutes les informations d'un groupe"
      },
      "ContractsByGroupResponseDTO": {
        "type": "object",
        "properties": {
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractsInfoDTO"
            }
          }
        },
        "description": "DTO de réponse avec les contrats appartenant à un groupe"
      },
      "ContractsInfoDTO": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string",
            "example": "CTR000000000"
          },
          "contractName": {
            "type": "string",
            "example": "1 - HAMARIS"
          }
        },
        "description": "DTO avec les infos des contrats"
      },
      "GetGroupeResponseMsDTO": {
        "type": "object",
        "properties": {
          "refGroupe": {
            "type": "string"
          },
          "nom": {
            "type": "string"
          }
        }
      },
      "MultisitesCustomerGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        },
        "description": "DTO answer for multisite customer group"
      },
      "MultisitesCustomerResponse": {
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string",
            "example": "ABC000000000"
          },
          "company": {
            "type": "string"
          },
          "customerType": {
            "type": "string"
          },
          "siretSiren": {
            "type": "string"
          },
          "ape": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/MultisitesCustomerGroup"
          },
          "referent": {
            "type": "string"
          },
          "referentEmail": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "DTO answer for multisite customer"
      },
      "ContractSearchByParamsRequest": {
        "required": [
          "city",
          "contractId",
          "contractName",
          "customerId",
          "group",
          "iban",
          "invoiceReference",
          "mail",
          "orderId",
          "phone",
          "siretSiren",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "description": "Nom du groupe",
            "example": "CHANEL"
          },
          "customerId": {
            "type": "string",
            "description": "Référence Client",
            "example": "EKW123456789"
          },
          "contractId": {
            "type": "string",
            "description": "Référence Contrat",
            "example": "CTR123456789"
          },
          "orderId": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string"
          },
          "contractName": {
            "type": "string",
            "description": "Nom contrat",
            "example": "MPJ VIGNOBLES ET RECHERCHES -12345678901234"
          },
          "phone": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "^\\d{0,10}$",
            "type": "string",
            "description": "phone or mobile phone",
            "example": "0606060606"
          },
          "mail": {
            "type": "string",
            "description": "email du client",
            "example": "email@ekwateur.fr"
          },
          "iban": {
            "pattern": "^(?:(?!;).)*$",
            "type": "string",
            "description": "iban du client",
            "example": "FR0012345678912345678912345"
          },
          "siretSiren": {
            "maxLength": 14,
            "minLength": 9,
            "type": "string",
            "description": "Code postal",
            "example": "31000"
          },
          "street": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "street name",
            "example": "place du Capitole"
          },
          "zipCode": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "\\d+",
            "type": "string",
            "description": "Code postal",
            "example": "31000"
          },
          "city": {
            "type": "string",
            "description": "Ville",
            "example": "Toulouse"
          },
          "invoiceReference": {
            "maxLength": 12,
            "minLength": 12,
            "type": "string",
            "description": "Numéro de facture",
            "example": "Toulouse"
          }
        }
      },
      "ContractSearchResponse": {
        "type": "object",
        "properties": {
          "contractName": {
            "type": "string"
          },
          "contractId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          },
          "offerName": {
            "type": "string"
          },
          "invoiceFrequency": {
            "type": "string"
          },
          "paymentMode": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PageContractSearchResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractSearchResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ContractInfosResponseMs": {
        "type": "object",
        "properties": {
          "raisonSociale": {
            "type": "string",
            "example": "BELLEVUE"
          },
          "referenceClient": {
            "type": "string",
            "example": "EKW000000000"
          },
          "nomGroupe": {
            "type": "string",
            "example": "CHANEL"
          },
          "referenceContrat": {
            "type": "string",
            "example": "CTR000000000"
          },
          "bonDeCommande": {
            "type": "string",
            "example": "ARLETTE"
          },
          "nomContrat": {
            "type": "string",
            "example": "VIGNOBLES ET RECHERCHES -04368306769259"
          }
        },
        "description": "Informations d'un regroupement de facture"
      },
      "CommunesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          }
        }
      },
      "InseeResponseDTO": {
        "type": "object",
        "properties": {
          "zipCode": {
            "type": "string"
          },
          "cities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunesDTO"
            }
          }
        }
      },
      "SimulateMonthlyFeeEnergyDTO": {
        "type": "object",
        "properties": {
          "energie": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "mensualiteMin": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "mensualiteMax": {
            "type": "integer",
            "format": "int32",
            "example": 30
          },
          "mensualiteRecommandee": {
            "type": "integer",
            "format": "int32",
            "example": 20
          },
          "sommeCars": {
            "type": "integer",
            "format": "int32",
            "example": 100
          }
        },
        "description": "Détails d'une mensualité"
      },
      "SimulateMonthlyFeeResponseDTO": {
        "type": "object",
        "properties": {
          "fakeDual": {
            "type": "boolean",
            "example": true
          },
          "mensualiteMin": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "mensualiteMax": {
            "type": "integer",
            "format": "int32",
            "example": 30
          },
          "mensualiteRecommandee": {
            "type": "integer",
            "format": "int32",
            "example": 20
          },
          "dateDebutEcheancier": {
            "type": "string",
            "format": "date"
          },
          "datePremiereEcheance": {
            "type": "string",
            "format": "date"
          },
          "dateProchaineRegularisation": {
            "type": "string",
            "format": "date"
          },
          "decomposition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimulateMonthlyFeeEnergyDTO"
            }
          }
        },
        "description": "Réponse pour la simulation des mensualités"
      },
      "CustomerSearchBySirenResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sirenOrSiret": {
            "type": "string"
          }
        }
      },
      "CustomerContractDto": {
        "type": "object",
        "properties": {
          "contractReference": {
            "type": "string"
          }
        }
      },
      "CustomerGetByMailResponseDto": {
        "type": "object",
        "properties": {
          "customerInformation": {
            "$ref": "#/components/schemas/CustomerInformationDto"
          },
          "customerReferenceDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerReferencesDto"
            }
          }
        }
      },
      "CustomerInformationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "civility": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobilePhone": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CustomerReferencesDto": {
        "type": "object",
        "properties": {
          "customerReference": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/CustomerAddressDto"
          },
          "housingProfile": {
            "$ref": "#/components/schemas/CustomerHousingProfileDto"
          },
          "pods": {
            "$ref": "#/components/schemas/CustomerPodDto"
          },
          "contract": {
            "$ref": "#/components/schemas/CustomerContractDto"
          }
        }
      },
      "GetCustomerHousingProfileResponseDto": {
        "type": "object",
        "properties": {
          "isOwner": {
            "type": "boolean",
            "example": true
          },
          "peopleNumber": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "housingType": {
            "type": "string",
            "example": "APPARTEMENT"
          },
          "area": {
            "type": "integer",
            "format": "int32",
            "example": 110
          },
          "outside": {
            "type": "boolean",
            "example": true
          },
          "isInsulated": {
            "type": "string",
            "enum": [
              "OUI",
              "NON",
              "NE_SAIT_PAS"
            ]
          },
          "constructionYear": {
            "type": "string",
            "example": "NEUF"
          },
          "houseHeatingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HouseHeatingTypeDto"
            }
          },
          "waterHeatingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaterHeatingTypeDto"
            }
          },
          "woodQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "fuelOilQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "propaneQuantity": {
            "type": "integer",
            "format": "int32",
            "example": 12
          },
          "elecProvider": {
            "type": "string",
            "example": "EKWATEUR"
          },
          "gasProvider": {
            "type": "string",
            "example": "EKWATEUR"
          },
          "declaredPower": {
            "type": "number",
            "format": "double",
            "example": 400
          },
          "connectedToGas": {
            "type": "boolean",
            "example": true
          },
          "equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEquipmentV2Dto"
            }
          },
          "balconyTerrace": {
            "type": "boolean",
            "example": true
          },
          "courtyard": {
            "type": "boolean",
            "example": true
          },
          "photovoltaic": {
            "type": "boolean",
            "example": false
          },
          "waterUsage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaterUsageDto"
            }
          },
          "waterMode": {
            "type": "string",
            "enum": [
              "INDIVIDUEL",
              "COLLECTIF"
            ]
          },
          "houseHeatingMode": {
            "type": "string",
            "enum": [
              "INDIVIDUEL",
              "COLLECTIF"
            ]
          },
          "cooking": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CookingDto"
            }
          },
          "mainLighting": {
            "type": "string",
            "example": "ECO"
          },
          "outsideArea": {
            "type": "integer",
            "format": "int32",
            "example": 12
          },
          "residence": {
            "type": "string",
            "enum": [
              "PRINCIPALE",
              "SECONDAIRE",
              "ETUDIANTS",
              "INOCCUPEE"
            ]
          },
          "position": {
            "type": "string",
            "example": "1COTE"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "rooms": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "pool": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "DTO de réponse avec les infos d'un lieu de consommation"
      },
      "CustomerGetByIdContract": {
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "orderView": {
            "type": "integer",
            "format": "int32"
          },
          "pods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerGetByIdPod"
            }
          }
        }
      },
      "CustomerGetByIdHousing": {
        "type": "object",
        "properties": {
          "housingType": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerGetByIdContract"
            }
          }
        }
      },
      "CustomerGetByIdPod": {
        "type": "object",
        "properties": {
          "podCode": {
            "type": "string"
          },
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomerGetByIdProfile": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "picture": {
            "type": "string"
          }
        }
      },
      "CustomerGetByIdResponseDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "civility": {
            "type": "string",
            "enum": [
              "M.",
              "Mme"
            ]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "sirenSiret": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "firstNameUseForbidden": {
            "type": "boolean"
          },
          "scoring": {
            "type": "integer",
            "format": "int32"
          },
          "customerServiceTeam": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/CustomerGetByIdProfile"
          },
          "housingCount": {
            "type": "integer",
            "format": "int32"
          },
          "segment": {
            "type": "string",
            "enum": [
              "PART",
              "PRO"
            ]
          },
          "housings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerGetByIdHousing"
            }
          }
        }
      },
      "CustomerDataResponseDto": {
        "type": "object",
        "properties": {
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "seniority": {
            "type": "string"
          },
          "sponsoredTotal": {
            "type": "integer",
            "format": "int32"
          },
          "sponsor": {
            "$ref": "#/components/schemas/SponsorDTO"
          },
          "loyaltyPoints": {
            "type": "integer",
            "format": "int32"
          },
          "accountAppCreationDate": {
            "type": "string",
            "format": "date"
          },
          "influencer": {
            "type": "boolean"
          },
          "socialNetwork": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialNetworkDto"
            }
          },
          "customerAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttributesDto"
            }
          }
        }
      },
      "SocialNetworkDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "followers": {
            "type": "integer",
            "format": "int32"
          },
          "alias": {
            "type": "string"
          },
          "posts": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GetTeamNumberResponseDTO": {
        "type": "object",
        "properties": {
          "teamNumber": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "teamLabel": {
            "type": "string",
            "example": "Equipe 1 - Amiens"
          }
        },
        "description": "DTO réponse avec les infos d'une équipe"
      },
      "AmountDetails": {
        "type": "object",
        "properties": {
          "used": {
            "type": "number",
            "example": 40.0
          },
          "remaining": {
            "type": "number",
            "example": 90.0
          },
          "type": {
            "type": "string",
            "enum": [
              "ABONNEMENT",
              "EURO",
              "KWH"
            ]
          }
        },
        "description": "Détail des montants d'une transaction"
      },
      "WalletDetail": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "useDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountDetails"
          },
          "code": {
            "type": "string",
            "example": "AVF001"
          },
          "reference": {
            "type": "string",
            "format": "uuid",
            "example": "35a3469a-367c-4322-83aa-4494ec145869"
          }
        },
        "description": "Détail du portefeuille du client"
      },
      "WalletResponse": {
        "type": "object",
        "properties": {
          "availableAmount": {
            "type": "number",
            "example": 25
          },
          "walletItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDetail"
            }
          }
        },
        "description": "DTO réponse pour le portefeuille du client"
      },
      "OffersPricesPeriodsResponse": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/components/schemas/Offer"
          },
          "current": {
            "$ref": "#/components/schemas/Offer"
          }
        }
      },
      "ElectricityStatuses": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          }
        },
        "description": "Un conteneur de l'historique des statuts pour l'électricité"
      },
      "GasStatuses": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          }
        },
        "description": "Un conteneur de l'historique des statuts pour le gaz"
      },
      "Status": {
        "required": [
          "startDate"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "example": "ACTIF"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Un status de contrat fourniture daté si historisé"
      },
      "StatusesByEnergyResponse": {
        "type": "object",
        "properties": {
          "electricity": {
            "$ref": "#/components/schemas/ElectricityStatuses"
          },
          "gas": {
            "$ref": "#/components/schemas/GasStatuses"
          }
        },
        "description": "Un réponse attendue contenant la partie electricité et gas de l'hitorique des statuts de contrats fourniture"
      },
      "Index": {
        "type": "object",
        "properties": {
          "temporalClass": {
            "type": "string",
            "enum": [
              "BASE",
              "HP",
              "HC",
              "HPH",
              "HCH",
              "HPB",
              "HCB"
            ]
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "example": 1000
          }
        },
        "description": "Informations des indexes du compteur"
      },
      "SubscriptionAnnualConsumptionReference": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "example": "Calculée par l'estimateur sur le parcours de souscription"
          },
          "dials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dial"
            }
          }
        },
        "description": "Détails des consommations annuelles de référence"
      },
      "SubscriptionMeterDetail": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "subscriptionType": {
            "type": "string",
            "enum": [
              "MES",
              "CHF"
            ]
          },
          "power": {
            "type": "number",
            "format": "double"
          },
          "tariffOption": {
            "type": "string",
            "enum": [
              "0",
              "1",
              "2",
              "4"
            ]
          },
          "tariffTransport": {
            "type": "string",
            "enum": [
              "CU4",
              "MU4",
              "CU",
              "CU_ST",
              "CUST",
              "MU",
              "MUDT",
              "LU",
              "T1",
              "T2",
              "T3",
              "T4",
              "TF",
              "TB",
              "BTINFLUSC",
              "BTINFCUST",
              "BTINFMUDT",
              "BTINFLU",
              "BTINFCU4",
              "BTINFMU4",
              "BTSUPLU4",
              "BTSUPCU4",
              "MU_DT"
            ]
          },
          "switchIndex": {
            "$ref": "#/components/schemas/SwitchIndex"
          },
          "annualConsumptionReference": {
            "$ref": "#/components/schemas/SubscriptionAnnualConsumptionReference"
          },
          "meterNumber": {
            "type": "string"
          },
          "distributionSystemOperators": {
            "type": "string"
          }
        },
        "description": "Détails des informations d'un compteur de souscription"
      },
      "SubscriptionMeterResponse": {
        "type": "object",
        "properties": {
          "meter": {
            "$ref": "#/components/schemas/SubscriptionMeterDetail"
          }
        },
        "description": "Réponse avec les informations du compteur de souscription du contrat pour une énergie donnée"
      },
      "SwitchIndex": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2022-01-22"
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            }
          }
        },
        "description": "Détails des consommations annuelles de référence"
      },
      "ContractService": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "example": "242af13c-c0cd-44db-beea-d2cb748635d2"
          },
          "code": {
            "type": "string",
            "example": "201203"
          },
          "name": {
            "type": "string",
            "example": "Gaz 100% biométhane"
          },
          "status": {
            "type": "string",
            "example": "TO_INVOICE",
            "enum": [
              "ACTIVE",
              "TERMINATED",
              "PENDING",
              "CANCELED",
              "BOUGHT",
              "TO_INVOICE"
            ]
          },
          "subscriptionDate": {
            "type": "string",
            "format": "date",
            "example": "2020-12-03"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2020-12-04"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2021-02-04"
          },
          "unitPrices": {
            "$ref": "#/components/schemas/UnitPrices"
          },
          "tariffType": {
            "type": "string",
            "example": "ONESHOT",
            "enum": [
              "KWH",
              "MENS",
              "ONESHOT"
            ]
          },
          "partnerName": {
            "type": "string",
            "example": "GREEN"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "example": 89188
          },
          "imageUrl": {
            "type": "string",
            "example": "/image/url"
          },
          "deliveryContext": {
            "type": "string",
            "example": "chemin_escarpe interdit_poids_lourds rue_etroite"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "unit": {
            "type": "string",
            "example": "carton(s)"
          },
          "availability": {
            "$ref": "#/components/schemas/DayDatesRange"
          }
        },
        "description": "The representation of a service containing UI oriented data"
      },
      "ContractServicesResponse": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractService"
            }
          }
        },
        "description": "A response containing the list of services requested"
      },
      "DayDatesRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2020-12-01"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2022-12-31"
          }
        },
        "description": "The representation of a day dates range"
      },
      "ContractsExposedAndRenewalResponse": {
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "currentTariffEnergy": {
            "$ref": "#/components/schemas/TariffEnergy"
          },
          "renewal": {
            "$ref": "#/components/schemas/RenewalProduct"
          }
        }
      },
      "RenewalProduct": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "emailSent": {
            "type": "boolean"
          },
          "tariff": {
            "$ref": "#/components/schemas/TariffRenewal"
          }
        }
      },
      "TariffEnergy": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "FIXE",
              "VARIABLE"
            ]
          },
          "typeChangeAuthorized": {
            "type": "boolean"
          }
        }
      },
      "TariffRenewal": {
        "type": "object",
        "properties": {
          "customerChosenType": {
            "type": "string",
            "enum": [
              "FIXE",
              "VARIABLE"
            ]
          },
          "changeAuthorized": {
            "type": "boolean"
          }
        }
      },
      "DistributionGridOperatorMeterDetail": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Détails des informations d'un compteur du Gestionnaire de réseau de distribution"
      },
      "PodConfigurationDetails": {
        "type": "object",
        "properties": {
          "tariffOption": {
            "$ref": "#/components/schemas/TariffOption"
          },
          "consumptionProfile": {
            "$ref": "#/components/schemas/StartDateAndNameConsumptionProfile"
          },
          "consumptionClass": {
            "$ref": "#/components/schemas/StartDateAndNameConsumptionClass"
          },
          "power": {
            "$ref": "#/components/schemas/StartDateAndValueDouble"
          },
          "tariffTransport": {
            "$ref": "#/components/schemas/StartDateAndNameTransportTariffEnum"
          },
          "distributionSystemOperator": {
            "type": "string"
          },
          "meter": {
            "$ref": "#/components/schemas/DistributionGridOperatorMeterDetail"
          }
        },
        "description": "Détail de la configuration d'un pod"
      },
      "PodConfigurationResponse": {
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/PodConfigurationDetails"
          }
        },
        "description": "Réponse avec la configuration d'un pod"
      },
      "StartDateAndNameConsumptionClass": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "name": {
            "type": "string",
            "enum": [
              "BASE",
              "B0",
              "B1",
              "B2I",
              "B2S"
            ]
          }
        },
        "description": "Object générique de réponse"
      },
      "StartDateAndNameConsumptionProfile": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "name": {
            "type": "string",
            "enum": [
              "P011",
              "P012",
              "P013",
              "P014",
              "P015",
              "P016",
              "P017",
              "P018",
              "P019",
              "RES1",
              "RES11",
              "RES2",
              "RES3",
              "RES4",
              "RES5",
              "PRO1",
              "PRO2",
              "PRO3",
              "PRO4",
              "PRO6",
              "PRO5",
              "RES1WE",
              "RES11WE",
              "RES2WE",
              "RES22WE",
              "PRO1WE",
              "PRO2WE",
              "PRO22WE",
              "ENT1",
              "ENT2",
              "ENT3",
              "ENT4",
              "ENT5",
              "ENT6",
              "ENT7"
            ]
          }
        },
        "description": "Object générique de réponse"
      },
      "StartDateAndNameTransportTariffEnum": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "name": {
            "type": "string",
            "enum": [
              "CU4",
              "MU4",
              "CU",
              "CU_ST",
              "CUST",
              "MU",
              "MUDT",
              "LU",
              "T1",
              "T2",
              "T3",
              "T4",
              "TF",
              "TB",
              "BTINFLUSC",
              "BTINFCUST",
              "BTINFMUDT",
              "BTINFLU",
              "BTINFCU4",
              "BTINFMU4",
              "BTSUPLU4",
              "BTSUPCU4",
              "MU_DT"
            ]
          }
        },
        "description": "Object générique de réponse"
      },
      "StartDateAndValueDouble": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Object générique de réponse"
      },
      "TariffOption": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "timeRange": {
            "type": "string",
            "example": "22H30-6H30"
          },
          "name": {
            "type": "string",
            "enum": [
              "0",
              "1",
              "2",
              "4"
            ]
          }
        },
        "description": "Information d'une option tarifaire"
      },
      "ConsentCaseTracking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "M02B8XLF"
          },
          "status": {
            "type": "string",
            "example": "Close, prestation non réalisée"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          }
        },
        "description": "Informations sur l'affaire du gestionnaire de réseau."
      },
      "ConsentItem": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "example": true
          },
          "readonly": {
            "type": "boolean",
            "example": false
          },
          "type": {
            "type": "string",
            "example": "P_MAX",
            "enum": [
              "NIGHTWATCH",
              "OFFRES_EKWATEUR",
              "COLLECTE_IDX",
              "COLLECTE_CDC",
              "P_MAX",
              "ENREGISTREMENT_CONSO"
            ]
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexConsentHistoryRange"
            }
          },
          "message": {
            "type": "string",
            "example": "Le détail des affaires GRD pour ce consentement est indisponible, veuillez réessayer."
          }
        },
        "description": "Informations sur un type de consentement."
      },
      "ConsentMeter": {
        "type": "object",
        "properties": {
          "communicating": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "example": "Compteur Linky"
          }
        },
        "description": "Informations du compteur lié au consentement."
      },
      "DistributionGridOperatorRequest": {
        "type": "object",
        "properties": {
          "caseTracking": {
            "$ref": "#/components/schemas/ConsentCaseTracking"
          },
          "serviceStatus": {
            "type": "string",
            "example": "NON_APPLICABLE"
          },
          "firstIndexTransmittedDate": {
            "type": "string",
            "format": "date",
            "example": "2021-04-29"
          }
        },
        "description": "Informations sur le suivi d'affaire côté gestionnaire de réseau."
      },
      "GetConsentsResponse": {
        "type": "object",
        "properties": {
          "meter": {
            "$ref": "#/components/schemas/ConsentMeter"
          },
          "consents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentItem"
            }
          }
        },
        "description": "Informations sur les consentements d'un pod."
      },
      "IndexConsentHistoryRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2021-04-29"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2021-05-10"
          },
          "distributionGridOperatorRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DistributionGridOperatorRequest"
            }
          }
        },
        "description": "Elément daté de l'historique d'un consentement de type index."
      },
      "AvailableStatusesResponse": {
        "type": "object",
        "properties": {
          "currentStatus": {
            "$ref": "#/components/schemas/StatusResponseItem"
          },
          "availableStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusResponseItem"
            }
          }
        }
      },
      "StatusResponseItem": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "CurrentMonthlyFeeResponse": {
        "type": "object",
        "properties": {
          "monthlyFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyFee"
            }
          }
        },
        "description": "Dto avec les informations des mensualités en cours"
      },
      "LastIndexDetail": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexDetail"
            }
          },
          "type": {
            "type": "string",
            "example": "Index auto-relevé"
          },
          "message": {
            "type": "string",
            "example": "Impossible de récupérer les relèves pour le moment. Veuillez réessayer."
          }
        },
        "description": "Détail de la dernière relève d'un compteur"
      },
      "MeterDetail": {
        "type": "object",
        "properties": {
          "energy": {
            "type": "string",
            "example": "ELEC",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "type": {
            "type": "string",
            "example": "Compteur gaz"
          },
          "communicating": {
            "type": "boolean",
            "example": false
          },
          "number": {
            "type": "string",
            "example": "125"
          },
          "powered": {
            "type": "string",
            "example": "ALIMENTE"
          },
          "distributionGridOperator": {
            "type": "string",
            "example": "GRD"
          },
          "nextReadingDates": {
            "type": "array",
            "example": [
              "01/12",
              "31/01"
            ],
            "items": {
              "type": "string",
              "format": "date"
            }
          },
          "lastIndex": {
            "$ref": "#/components/schemas/LastIndexDetail"
          }
        },
        "description": "Détails des informations d'un compteur"
      },
      "MeterResponse": {
        "type": "object",
        "properties": {
          "meters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterDetail"
            }
          }
        },
        "description": "Réponse avec les informations des compteurs du contrat"
      },
      "AvailableInvoiceFrequency": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "ANN",
            "enum": [
              "MENS",
              "BIM",
              "ANN"
            ]
          },
          "active": {
            "type": "boolean"
          }
        },
        "description": "Détail d'un rythme de facturation"
      },
      "InvoiceFrequenciesResponseAvailable": {
        "type": "object",
        "properties": {
          "warningMessage": {
            "type": "string",
            "example": "Contenu du message"
          },
          "availableInvoiceFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableInvoiceFrequency"
            }
          }
        },
        "description": "DTO pour les infos du rythme de facturation"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "civility": {
            "type": "string",
            "example": "M."
          },
          "firstName": {
            "type": "string",
            "example": "jean marie"
          },
          "lastName": {
            "type": "string",
            "example": "berthion"
          },
          "civility2": {
            "type": "string",
            "example": "M."
          },
          "firstName2": {
            "type": "string",
            "example": "Favrau"
          },
          "lastName2": {
            "type": "string",
            "example": "Nicolas"
          },
          "email": {
            "type": "string",
            "example": "test-go@ekwateur.fr"
          },
          "phone": {
            "type": "string",
            "example": "0606060606"
          },
          "mobilePhone": {
            "type": "string",
            "example": "0606060606"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "example": "2023-07-10"
          },
          "type": {
            "type": "string",
            "example": "FACTURATION",
            "enum": [
              "FACTURATION",
              "CONSOMMATION",
              "FACTURATION_CONSOMMATION",
              "UTILISATEUR",
              "SIGNATORY",
              "OPERATIONAL"
            ]
          }
        },
        "description": "Informations concernant le contact"
      },
      "Address": {
        "type": "object",
        "properties": {
          "streetNumber": {
            "type": "string",
            "example": "15"
          },
          "street": {
            "type": "string",
            "example": "rue ERNEST LAVAL"
          },
          "additionalAddress": {
            "type": "string",
            "example": "Logement 1"
          },
          "zipCode": {
            "type": "string",
            "example": "38000"
          },
          "inseeCode": {
            "type": "string",
            "example": "04355"
          },
          "municipality": {
            "type": "string",
            "example": "PARIS"
          },
          "building": {
            "type": "string",
            "example": "B2"
          },
          "staircase": {
            "type": "string",
            "example": "2"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "flat": {
            "type": "string",
            "example": "46"
          },
          "reference": {
            "type": "string",
            "format": "uuid",
            "example": "ecd84e8b-c938-49fd-b3aa-38c2c1d20756"
          },
          "type": {
            "type": "string",
            "example": "F",
            "enum": [
              "BILLING",
              "CONSUMPTION"
            ]
          }
        },
        "description": "Informations concernant l'adresse du client "
      },
      "LogResponse": {
        "type": "object",
        "properties": {
          "requester": {
            "$ref": "#/components/schemas/Requester"
          },
          "channel": {
            "type": "string"
          }
        },
        "description": "Détail des logs"
      },
      "Requester": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "TerminationRequestResponse": {
        "type": "object",
        "properties": {
          "requestedDate": {
            "type": "string",
            "format": "date"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "isConfirmed": {
            "type": "boolean"
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            }
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            }
          }
        },
        "description": "Réponse d'une demande d'un résiliation"
      },
      "DirectDebitDetails": {
        "type": "object",
        "properties": {
          "amountToPay": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "approvalDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "PodLifeCycleResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PodStatusDetails"
          },
          "subscriptionDate": {
            "type": "string",
            "format": "date"
          },
          "firstDirectDebit": {
            "$ref": "#/components/schemas/DirectDebitDetails"
          },
          "chosenSupplyStartDate": {
            "type": "string",
            "format": "date"
          },
          "supplyStartDate": {
            "type": "string",
            "format": "date"
          },
          "supplyEndDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "PodStatusDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ContractPaymentMethodResponse": {
        "type": "object",
        "properties": {
          "paymentMethod": {
            "type": "string",
            "description": "Methode de payment",
            "example": "DOM"
          },
          "dayOfPayment": {
            "type": "integer",
            "description": "jour du paiement",
            "format": "int32",
            "example": 15
          },
          "billingFrequency": {
            "type": "string",
            "description": "Fréquence de facturation",
            "example": "ANN"
          },
          "bankDetail": {
            "$ref": "#/components/schemas/BankDetail"
          }
        }
      },
      "ContractBillingConfigurationHistory": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "example": "2022-04-13"
          },
          "billingFrequencyCode": {
            "type": "string",
            "example": "BIM"
          },
          "paymentDay": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "paymentMethodCode": {
            "type": "string",
            "example": "CB"
          },
          "sendingChannel": {
            "type": "string",
            "example": "MAIL"
          },
          "billingBatch": {
            "type": "string",
            "example": "A01"
          }
        }
      },
      "PodResponse": {
        "type": "object",
        "properties": {
          "podCode": {
            "type": "string",
            "example": "23303473189045"
          },
          "energy": {
            "type": "string",
            "enum": [
              "GAZ",
              "ELEC",
              "DUAL",
              "BOIS",
              "NO_ENERGY"
            ]
          },
          "status": {
            "type": "string",
            "example": "ACTIF"
          },
          "prestation": {
            "type": "string",
            "example": "CHF"
          },
          "beginDate": {
            "type": "string",
            "format": "date",
            "example": "2019-12-20"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "meterType": {
            "type": "string",
            "example": "Compteur gaz"
          },
          "sellingChannelCode": {
            "type": "string",
            "example": "Akira"
          },
          "businessProvider": {
            "type": "string",
            "example": "UFC2019"
          }
        },
        "description": "DTO réponse pour les infos du pod d'un contrat"
      },
      "ContactAndConsentContractResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "billingChannel": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/CustomerContact"
          },
          "address": {
            "$ref": "#/components/schemas/CustomerAddressResponseDto"
          }
        }
      },
      "ContractBalanceResponse": {
        "type": "object",
        "properties": {
          "balanceDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          },
          "outstandingBalance": {
            "type": "number",
            "format": "double",
            "example": 20
          },
          "unmaturedBalance": {
            "type": "number",
            "format": "double",
            "example": 10
          },
          "invoiceFrequencyCode": {
            "type": "string",
            "example": "ANN"
          },
          "paymentModeCode": {
            "type": "string",
            "example": "CB"
          },
          "invoiceStartDate": {
            "type": "string",
            "format": "date",
            "example": "2022-01-01"
          }
        },
        "description": "Réponse avec les informations de facturation du client"
      },
      "RegulatoryStatementResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "PRICE_SHIELD_2023_PRO",
            "enum": [
              "PRICE_SHIELD_2023_PRO",
              "PRICE_SHIELD_2023_COLLECTIVITY"
            ]
          },
          "statementTypeVersion": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "customerRefusal": {
            "type": "boolean",
            "example": false
          },
          "data": {
            "type": "object",
            "format": "JSonNode"
          }
        },
        "description": "Response regulatory statement"
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
